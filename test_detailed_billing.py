#!/usr/bin/env python3
"""
Test de la facturation d√©taill√©e par motif PA et CM.
"""

import sys
import os
import re
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def test_detailed_billing_html():
    """Test que le HTML contient tous les motifs PA et CM avec leurs inputs de prix."""
    print("üîç Test de la Structure HTML Facturation D√©taill√©e")
    print("=" * 60)
    
    try:
        html_file = Path(__file__).parent / "src" / "pres stats" / "index.html"
        
        if not html_file.exists():
            print(f"   ‚ùå Fichier HTML non trouv√©")
            return False
        
        with open(html_file, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # V√©rifier les motifs PA (10 motifs)
        pa_motifs = [
            'AD RAS sans temps',
            'AD RAS avec temps', 
            'OK',
            'NOK',
            'AD Non jointe',
            'UPR RAS',
            'AD Non trouv√©e',
            'Hors commune',
            'UPR NOK',
            'UPR OK'
        ]
        
        print(f"   üìã V√©rification des motifs PA:")
        pa_found = 0
        for motif in pa_motifs:
            if motif in html_content:
                print(f"      ‚úÖ {motif}: Trouv√©")
                pa_found += 1
            else:
                print(f"      ‚ùå {motif}: Manquant")
        
        # V√©rifier les motifs CM (3 motifs)
        cm_motifs = ['RAF', 'Modification', 'Cr√©ation']
        
        print(f"\n   üìä V√©rification des motifs CM:")
        cm_found = 0
        for motif in cm_motifs:
            if motif in html_content:
                print(f"      ‚úÖ {motif}: Trouv√©")
                cm_found += 1
            else:
                print(f"      ‚ùå {motif}: Manquant")
        
        # V√©rifier les inputs de prix
        price_inputs = [
            'price-ad-ras-sans', 'price-ad-ras-avec', 'price-ok', 'price-nok',
            'price-ad-non-jointe', 'price-upr-ras', 'price-ad-non-trouvee',
            'price-hors-commune', 'price-upr-nok', 'price-upr-ok',
            'price-raf', 'price-modification', 'price-creation'
        ]
        
        print(f"\n   üí∂ V√©rification des inputs de prix:")
        price_found = 0
        for price_id in price_inputs:
            if f'id="{price_id}"' in html_content:
                print(f"      ‚úÖ {price_id}: Input trouv√©")
                price_found += 1
            else:
                print(f"      ‚ùå {price_id}: Input manquant")
        
        # V√©rifier les √©l√©ments de total
        total_elements = ['totalPA', 'totalCM', 'grandTotal']
        total_found = 0
        for total_id in total_elements:
            if f'id="{total_id}"' in html_content:
                print(f"      ‚úÖ {total_id}: √âl√©ment trouv√©")
                total_found += 1
            else:
                print(f"      ‚ùå {total_id}: √âl√©ment manquant")
        
        total_checks = pa_found + cm_found + price_found + total_found
        expected_total = len(pa_motifs) + len(cm_motifs) + len(price_inputs) + len(total_elements)
        
        if total_checks >= expected_total - 2:  # Tol√©rance de 2
            print(f"\n   ‚úÖ Structure HTML d√©taill√©e correcte ({total_checks}/{expected_total})")
            return True
        else:
            print(f"\n   ‚ùå Structure HTML d√©taill√©e incompl√®te ({total_checks}/{expected_total})")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test HTML: {e}")
        return False

def test_detailed_billing_css():
    """Test que les styles CSS pour la facturation d√©taill√©e sont pr√©sents."""
    print("\nüé® Test des Styles CSS Facturation D√©taill√©e")
    print("=" * 60)
    
    try:
        css_file = Path(__file__).parent / "src" / "pres stats" / "styles.css"
        
        if not css_file.exists():
            print(f"   ‚ùå Fichier CSS non trouv√©")
            return False
        
        with open(css_file, 'r', encoding='utf-8') as f:
            css_content = f.read()
        
        # V√©rifier les nouveaux styles
        css_classes = [
            ('Motif pricing section', '.motif-pricing-section'),
            ('Section title', '.section-title'),
            ('Motif pricing grid', '.motif-pricing-grid'),
            ('CM grid', '.motif-pricing-grid.cm-grid'),
            ('Motif price item', '.motif-price-item'),
            ('Motif price input', '.motif-price-input'),
            ('Motif total', '.motif-total'),
            ('Section total', '.section-total'),
            ('PA section total', '.pa-section-total'),
            ('CM section total', '.cm-section-total')
        ]
        
        passed_checks = 0
        for check_name, css_class in css_classes:
            if css_class in css_content:
                print(f"   ‚úÖ {check_name}: Style d√©fini")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Style manquant")
        
        # V√©rifier les effets visuels
        visual_effects = [
            ('Grid layout', 'grid-template-columns'),
            ('Hover effect', ':hover'),
            ('Focus effect', ':focus'),
            ('Transform effect', 'transform:'),
            ('Gradient backgrounds', 'linear-gradient')
        ]
        
        for check_name, pattern in visual_effects:
            if pattern in css_content:
                print(f"   ‚úÖ {check_name}: Effet d√©fini")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Effet manquant")
        
        if passed_checks >= 13:  # Au moins 13 sur 15
            print(f"   ‚úÖ Styles CSS d√©taill√©s complets ({passed_checks}/15)")
            return True
        else:
            print(f"   ‚ùå Styles CSS d√©taill√©s incomplets ({passed_checks}/15)")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test CSS: {e}")
        return False

def test_detailed_billing_javascript():
    """Test que le JavaScript pour la facturation d√©taill√©e est impl√©ment√©."""
    print("\nüíª Test du JavaScript Facturation D√©taill√©e")
    print("=" * 60)
    
    try:
        js_file = Path(__file__).parent / "src" / "pres stats" / "script.js"
        
        if not js_file.exists():
            print(f"   ‚ùå Fichier JavaScript non trouv√©")
            return False
        
        with open(js_file, 'r', encoding='utf-8') as f:
            js_content = f.read()
        
        # V√©rifier la nouvelle classe DetailedBillingCalculator
        js_elements = [
            ('Classe DetailedBillingCalculator', 'class DetailedBillingCalculator'),
            ('PA motifs array', 'this.paMotifs'),
            ('CM motifs array', 'this.cmMotifs'),
            ('Constructor', 'constructor()'),
            ('Init method', 'init()'),
            ('Add event listeners', 'addEventListeners()'),
            ('Update counts', 'updateCounts()'),
            ('Calculate all prices', 'calculateAllPrices()'),
            ('Format currency', 'formatCurrency(amount)'),
            ('Update with real data', 'updateWithRealData(paData, cmData)'),
            ('Event listeners forEach', 'forEach(motif =>'),
            ('Price input event', 'addEventListener(\'input\''),
            ('DetailedBillingCalculator instance', 'detailedBillingCalculator = new DetailedBillingCalculator')
        ]
        
        passed_checks = 0
        for check_name, pattern in js_elements:
            if pattern in js_content:
                print(f"   ‚úÖ {check_name}: Impl√©ment√©")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Manquant")
        
        # V√©rifier les motifs sp√©cifiques
        motif_checks = [
            ('AD RAS sans temps motif', 'ad-ras-sans'),
            ('RAF motif', 'raf'),
            ('Modification motif', 'modification'),
            ('Cr√©ation motif', 'creation')
        ]
        
        for check_name, pattern in motif_checks:
            if pattern in js_content:
                print(f"   ‚úÖ {check_name}: D√©fini")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Manquant")
        
        if passed_checks >= 15:  # Au moins 15 sur 17
            print(f"   ‚úÖ JavaScript d√©taill√© complet ({passed_checks}/17)")
            return True
        else:
            print(f"   ‚ùå JavaScript d√©taill√© incomplet ({passed_checks}/17)")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test JavaScript: {e}")
        return False

def test_python_detailed_integration():
    """Test que l'int√©gration Python pour la facturation d√©taill√©e est correcte."""
    print("\nüêç Test de l'Int√©gration Python D√©taill√©e")
    print("=" * 60)
    
    try:
        from ui.modules.team_stats_module import TeamStatsModule
        
        # V√©rifier que la m√©thode mise √† jour existe
        if hasattr(TeamStatsModule, '_update_facturation_data'):
            print(f"   ‚úÖ M√©thode _update_facturation_data: Existe")
        else:
            print(f"   ‚ùå M√©thode _update_facturation_data: Manquante")
            return False
        
        # V√©rifier le code source pour les donn√©es d√©taill√©es
        import inspect
        source = inspect.getsource(TeamStatsModule._update_facturation_data)
        
        integration_checks = [
            ('PA motif data', 'pa_motif_data'),
            ('CM motif data', 'cm_motif_data'),
            ('Individual motif counts', 'acts_values'),
            ('CM individual counts', 'cm_values'),
            ('Detailed facturation data', 'pa_motifs'),
            ('CM motifs storage', 'cm_motifs'),
            ('Logging motif data', 'motif data for facturation')
        ]
        
        passed_checks = 1  # 1 m√©thode trouv√©e
        for check_name, pattern in integration_checks:
            if pattern in source:
                print(f"   ‚úÖ {check_name}: Impl√©ment√©")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Manquant")
        
        # V√©rifier la mise √† jour script.js
        script_source = inspect.getsource(TeamStatsModule._update_script_js_values)
        
        script_checks = [
            ('Detailed facturation update', 'detailedBillingCalculator'),
            ('PA data string', 'pa_data_str'),
            ('CM data string', 'cm_data_str'),
            ('Real values update', 'updateWithRealData')
        ]
        
        for check_name, pattern in script_checks:
            if pattern in script_source:
                print(f"   ‚úÖ {check_name}: Impl√©ment√©")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Manquant")
        
        if passed_checks >= 10:  # Au moins 10 sur 12
            print(f"   ‚úÖ Int√©gration Python d√©taill√©e correcte ({passed_checks}/12)")
            return True
        else:
            print(f"   ‚ùå Int√©gration Python d√©taill√©e incompl√®te ({passed_checks}/12)")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test Python: {e}")
        return False

def main():
    """Fonction principale de test."""
    print("üöÄ Test de la Facturation D√©taill√©e par Motif")
    print("=" * 80)
    
    tests_passed = 0
    total_tests = 4
    
    # Test 1: Structure HTML d√©taill√©e
    if test_detailed_billing_html():
        tests_passed += 1
        print("\n‚úÖ Test 1 R√âUSSI: Structure HTML d√©taill√©e")
    else:
        print("\n‚ùå Test 1 √âCHOU√â: Structure HTML d√©taill√©e")
    
    # Test 2: Styles CSS d√©taill√©s
    if test_detailed_billing_css():
        tests_passed += 1
        print("\n‚úÖ Test 2 R√âUSSI: Styles CSS d√©taill√©s")
    else:
        print("\n‚ùå Test 2 √âCHOU√â: Styles CSS d√©taill√©s")
    
    # Test 3: JavaScript d√©taill√©
    if test_detailed_billing_javascript():
        tests_passed += 1
        print("\n‚úÖ Test 3 R√âUSSI: JavaScript d√©taill√©")
    else:
        print("\n‚ùå Test 3 √âCHOU√â: JavaScript d√©taill√©")
    
    # Test 4: Int√©gration Python d√©taill√©e
    if test_python_detailed_integration():
        tests_passed += 1
        print("\n‚úÖ Test 4 R√âUSSI: Int√©gration Python d√©taill√©e")
    else:
        print("\n‚ùå Test 4 √âCHOU√â: Int√©gration Python d√©taill√©e")
    
    # R√©sum√©
    print("\n" + "=" * 80)
    print(f"üìä R√©sultats: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("\n‚úÖ Facturation d√©taill√©e par motif compl√®tement impl√©ment√©e!")
        
        print("\nüéØ Fonctionnalit√©s livr√©es:")
        print("\nüìã Motifs PA (10 motifs individuels):")
        print("  ‚Ä¢ AD RAS sans temps, AD RAS avec temps, OK, NOK")
        print("  ‚Ä¢ AD Non jointe, UPR RAS, AD Non trouv√©e")
        print("  ‚Ä¢ Hors commune, UPR NOK, UPR OK")
        print("  ‚Ä¢ Chaque motif a son propre prix unitaire")
        
        print("\nüìä Motifs CM (3 motifs individuels):")
        print("  ‚Ä¢ RAF, Modification, Cr√©ation")
        print("  ‚Ä¢ Chaque motif a son propre prix unitaire")
        
        print("\nüí∂ Calculs automatiques:")
        print("  ‚Ä¢ Total par motif: Count √ó Prix individuel")
        print("  ‚Ä¢ Total PA: Somme de tous les motifs PA")
        print("  ‚Ä¢ Total CM: Somme de tous les motifs CM")
        print("  ‚Ä¢ Grand Total: Total PA + Total CM")
        
        print("\nüé® Interface utilisateur:")
        print("  ‚Ä¢ Grid layout responsive pour les motifs")
        print("  ‚Ä¢ Prix par d√©faut diff√©renci√©s par complexit√©")
        print("  ‚Ä¢ Mise √† jour temps r√©el de tous les calculs")
        print("  ‚Ä¢ Formatage devise fran√ßais professionnel")
        
        print("\nüìä Exemple avec prix diff√©renci√©s:")
        print("  PA - AD RAS sans temps: 13,244 √ó ‚Ç¨1.00 = ‚Ç¨13,244.00")
        print("  PA - AD RAS avec temps: 4,889 √ó ‚Ç¨1.50 = ‚Ç¨7,333.50")
        print("  CM - RAF: 1,573 √ó ‚Ç¨2.00 = ‚Ç¨3,146.00")
        print("  CM - Modification: 24 √ó ‚Ç¨3.00 = ‚Ç¨72.00")
        print("  CM - Cr√©ation: 124 √ó ‚Ç¨4.00 = ‚Ç¨496.00")
        print("  Grand Total: ‚Ç¨24,291.50")
        
        print("\nüöÄ Facturation complexe par motif pr√™te!")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - tests_passed} test(s) √©chou√©(s).")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
