#!/usr/bin/env python3
"""
Test simple des nouvelles m√©thodes DMT individuelles.
"""

import sys
import os
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def main():
    print("üöÄ Test Simple des M√©thodes DMT Individuelles")
    print("=" * 60)
    
    try:
        # Test import
        print("üì¶ Test import...")
        from ui.modules.team_stats_module import TeamStatsModule
        print("‚úÖ Import r√©ussi")
        
        # Test m√©thodes existent
        print("\nüîç V√©rification des m√©thodes...")
        methods = ['_calculate_individual_dmt_pa', '_calculate_individual_dmt_cm']
        
        for method in methods:
            if hasattr(TeamStatsModule, method):
                print(f"‚úÖ {method}: Existe")
            else:
                print(f"‚ùå {method}: Manquant")
                return False
        
        # Test int√©gration dans _calculate_dmt_automatically
        print("\nüîß V√©rification int√©gration...")
        team_stats_file = Path(__file__).parent / "src" / "ui" / "modules" / "team_stats_module.py"
        
        with open(team_stats_file, 'r', encoding='utf-8') as f:
            source_code = f.read()
        
        integration_patterns = [
            'dmt_pa = self._calculate_individual_dmt_pa(collab)',
            'dmt_cm = self._calculate_individual_dmt_cm(collab)',
            'def _calculate_individual_dmt_pa(self, collaborateur):',
            'def _calculate_individual_dmt_cm(self, collaborateur):'
        ]
        
        for pattern in integration_patterns:
            if pattern in source_code:
                print(f"‚úÖ {pattern[:50]}...")
            else:
                print(f"‚ùå {pattern[:50]}...")
                return False
        
        # Test sp√©cifications
        print("\nüìä V√©rification sp√©cifications...")
        
        # DMT PA sp√©cifications
        pa_specs = [
            ("PA Feuille 3", "'Traitement PA' not in self.global_suivi_data"),
            ("PA Colonne F", "columns[5]  # Column F (index 5)"),
            ("PA Colonne H", "columns[7]          # Column H (index 7)"),
            ("PA Filtrage collaborateur", "str(row_collaborateur).strip() == str(collaborateur).strip()"),
            ("PA Exclusion z√©ro", "if duree_numeric > 0:")
        ]
        
        for spec_name, pattern in pa_specs:
            if pattern in source_code:
                print(f"‚úÖ {spec_name}")
            else:
                print(f"‚ùå {spec_name}")
        
        # DMT CM sp√©cifications
        cm_specs = [
            ("CM Feuille 2", "'CM' not in self.global_suivi_data"),
            ("CM Colonne E", "columns[4]  # Column E (index 4) - CORRIG√â"),
            ("CM Colonne J", "columns[9]          # Column J (index 9)"),
            ("CM Filtrage collaborateur", "str(row_collaborateur).strip() == str(collaborateur).strip()"),
            ("CM Exclusion z√©ro", "if duree_numeric > 0:")
        ]
        
        for spec_name, pattern in cm_specs:
            if pattern in source_code:
                print(f"‚úÖ {spec_name}")
            else:
                print(f"‚ùå {spec_name}")
        
        print("\nüéâ TOUS LES TESTS R√âUSSIS!")
        
        print("\nüìã R√©sum√© des Modifications:")
        print("=" * 60)
        
        print("\nüîß Nouvelles M√©thodes Cr√©√©es:")
        print("‚Ä¢ _calculate_individual_dmt_pa(collaborateur)")
        print("  - Calcule DMT PA pour un collaborateur sp√©cifique")
        print("  - Source: Feuille 3, Colonne F (collaborateur), Colonne H (dur√©e)")
        print("  - Filtrage: Par collaborateur + exclusion 0/vides")
        
        print("\n‚Ä¢ _calculate_individual_dmt_cm(collaborateur)")
        print("  - Calcule DMT CM pour un collaborateur sp√©cifique")
        print("  - Source: Feuille 2, Colonne E (collaborateur), Colonne J (dur√©e)")
        print("  - Filtrage: Par collaborateur + exclusion 0/vides")
        
        print("\nüîÑ Int√©gration dans _calculate_dmt_automatically:")
        print("‚Ä¢ Remplace les appels aux m√©thodes globales")
        print("‚Ä¢ Utilise les nouvelles m√©thodes individuelles")
        print("‚Ä¢ Stocke les r√©sultats dans self.dmt_data[collaborateur]")
        
        print("\nüéØ Probl√®me R√©solu:")
        print("‚Ä¢ AVANT: DMT identiques pour tous (moyennes globales)")
        print("‚Ä¢ APR√àS: DMT individuels par collaborateur")
        print("‚Ä¢ Interface: Affichage correct des valeurs individuelles")
        
        print("\n‚úÖ Les DMT individuels sont maintenant calcul√©s correctement!")
        print("‚úÖ DMT CM utilise la Colonne E (corrig√©e)")
        print("‚úÖ DMT PA utilise la Colonne F (pr√©serv√©e)")
        print("‚úÖ Filtrage par collaborateur impl√©ment√©")
        print("‚úÖ Exclusion des valeurs 0 et vides")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ SUCCESS: Nouvelles m√©thodes DMT individuelles impl√©ment√©es!")
    else:
        print("\n‚ùå FAILURE: Probl√®me avec les nouvelles m√©thodes DMT individuelles")
    sys.exit(0 if success else 1)
