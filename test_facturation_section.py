#!/usr/bin/env python3
"""
Test de la section Facturation (Billing) du dashboard.
"""

import sys
import os
import re
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def test_facturation_html_structure():
    """Test que la structure HTML de la section Facturation est correcte."""
    print("üîç Test de la Structure HTML Facturation")
    print("=" * 60)
    
    try:
        html_file = Path(__file__).parent / "src" / "pres stats" / "index.html"
        
        if not html_file.exists():
            print(f"   ‚ùå Fichier HTML non trouv√©")
            return False
        
        with open(html_file, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # V√©rifier les √©l√©ments de la section Facturation
        facturation_elements = [
            ('Section facturation', 'facturation-section'),
            ('Titre facturation', 'üí∞ Facturation'),
            ('Container billing', 'billing-container'),
            ('Input prix unitaire', 'unitPrice'),
            ('Label prix unitaire', 'Prix unitaire (‚Ç¨)'),
            ('Section calculs', 'billing-calculations'),
            ('Item PA billing', 'pa-billing'),
            ('Item CM billing', 'cm-billing'),
            ('Total PA', 'paTotal'),
            ('Total CM', 'cmTotal'),
            ('Grand total', 'grandTotal'),
            ('Section grand total', 'grand-total-section')
        ]
        
        passed_checks = 0
        for check_name, pattern in facturation_elements:
            if pattern in html_content:
                print(f"   ‚úÖ {check_name}: Trouv√©")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Manquant")
        
        # V√©rifier les IDs sp√©cifiques pour JavaScript
        js_ids = ['unitPrice', 'paCount', 'cmCount', 'paUnitPrice', 'cmUnitPrice', 'paTotal', 'cmTotal', 'grandTotal']
        for js_id in js_ids:
            if f'id="{js_id}"' in html_content:
                print(f"   ‚úÖ ID JavaScript {js_id}: Trouv√©")
                passed_checks += 1
            else:
                print(f"   ‚ùå ID JavaScript {js_id}: Manquant")
        
        if passed_checks >= 18:  # 12 √©l√©ments + 8 IDs minimum
            print(f"   ‚úÖ Structure HTML Facturation correcte ({passed_checks}/20)")
            return True
        else:
            print(f"   ‚ùå Structure HTML Facturation incompl√®te ({passed_checks}/20)")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test HTML: {e}")
        return False

def test_facturation_css_styles():
    """Test que les styles CSS de la section Facturation sont ajout√©s."""
    print("\nüé® Test des Styles CSS Facturation")
    print("=" * 60)
    
    try:
        css_file = Path(__file__).parent / "src" / "pres stats" / "styles.css"
        
        if not css_file.exists():
            print(f"   ‚ùå Fichier CSS non trouv√©")
            return False
        
        with open(css_file, 'r', encoding='utf-8') as f:
            css_content = f.read()
        
        # V√©rifier les styles de facturation
        css_classes = [
            ('Facturation section', '.facturation-section'),
            ('Full width card', '.card.full-width'),
            ('Billing container', '.billing-container'),
            ('Price input section', '.price-input-section'),
            ('Price input', '.price-input'),
            ('Billing calculations', '.billing-calculations'),
            ('Billing row', '.billing-row'),
            ('Billing item', '.billing-item'),
            ('PA billing', '.pa-billing'),
            ('CM billing', '.cm-billing'),
            ('Billing header', '.billing-header'),
            ('Billing details', '.billing-details'),
            ('Grand total section', '.grand-total-section'),
            ('Grand total item', '.grand-total-item'),
            ('Grand total value', '.grand-total-value')
        ]
        
        passed_checks = 0
        for check_name, css_class in css_classes:
            if css_class in css_content:
                print(f"   ‚úÖ {check_name}: Style d√©fini")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Style manquant")
        
        # V√©rifier les couleurs et effets
        visual_effects = [
            ('Gradient PA', 'linear-gradient(135deg, #e8f5e8'),
            ('Gradient CM', 'linear-gradient(135deg, #e3f2fd'),
            ('Gradient Grand Total', 'linear-gradient(135deg, #ffd700'),
            ('Focus effect', 'transform: scale(1.05)'),
            ('Box shadow', 'box-shadow:')
        ]
        
        for check_name, pattern in visual_effects:
            if pattern in css_content:
                print(f"   ‚úÖ {check_name}: Effet d√©fini")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Effet manquant")
        
        if passed_checks >= 18:  # Au moins 18 sur 20
            print(f"   ‚úÖ Styles CSS Facturation complets ({passed_checks}/20)")
            return True
        else:
            print(f"   ‚ùå Styles CSS Facturation incomplets ({passed_checks}/20)")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test CSS: {e}")
        return False

def test_facturation_javascript():
    """Test que le JavaScript de la section Facturation est impl√©ment√©."""
    print("\nüíª Test du JavaScript Facturation")
    print("=" * 60)
    
    try:
        js_file = Path(__file__).parent / "src" / "pres stats" / "script.js"
        
        if not js_file.exists():
            print(f"   ‚ùå Fichier JavaScript non trouv√©")
            return False
        
        with open(js_file, 'r', encoding='utf-8') as f:
            js_content = f.read()
        
        # V√©rifier la classe BillingCalculator
        js_elements = [
            ('Classe BillingCalculator', 'class BillingCalculator'),
            ('Constructor', 'constructor()'),
            ('M√©thode init', 'init()'),
            ('M√©thode updateCounts', 'updateCounts()'),
            ('M√©thode getPACount', 'getPACount()'),
            ('M√©thode getCMCount', 'getCMCount()'),
            ('M√©thode calculatePrices', 'calculatePrices()'),
            ('M√©thode formatCurrency', 'formatCurrency(amount)'),
            ('M√©thode updateWithRealData', 'updateWithRealData(paData, cmData)'),
            ('Event listener input', 'addEventListener(\'input\''),
            ('Intl.NumberFormat', 'Intl.NumberFormat'),
            ('Currency EUR', 'currency: \'EUR\''),
            ('Variable billingCalculator', 'billingCalculator = new BillingCalculator')
        ]
        
        passed_checks = 0
        for check_name, pattern in js_elements:
            if pattern in js_content:
                print(f"   ‚úÖ {check_name}: Impl√©ment√©")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Manquant")
        
        # V√©rifier les IDs utilis√©s
        js_ids = ['unitPrice', 'paCount', 'cmCount', 'paTotal', 'cmTotal', 'grandTotal']
        for js_id in js_ids:
            if f'getElementById(\'{js_id}\')' in js_content:
                print(f"   ‚úÖ Utilisation ID {js_id}: Trouv√©e")
                passed_checks += 1
            else:
                print(f"   ‚ùå Utilisation ID {js_id}: Manquante")
        
        if passed_checks >= 17:  # Au moins 17 sur 19
            print(f"   ‚úÖ JavaScript Facturation complet ({passed_checks}/19)")
            return True
        else:
            print(f"   ‚ùå JavaScript Facturation incomplet ({passed_checks}/19)")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test JavaScript: {e}")
        return False

def test_python_integration():
    """Test que l'int√©gration Python est correcte."""
    print("\nüêç Test de l'Int√©gration Python")
    print("=" * 60)
    
    try:
        from ui.modules.team_stats_module import TeamStatsModule
        
        # V√©rifier que les m√©thodes existent
        required_methods = [
            '_update_facturation_data',
            '_update_html_elements_with_data'
        ]
        
        for method_name in required_methods:
            if hasattr(TeamStatsModule, method_name):
                print(f"   ‚úÖ M√©thode {method_name}: Existe")
            else:
                print(f"   ‚ùå M√©thode {method_name}: Manquante")
                return False
        
        # V√©rifier le code source pour l'int√©gration facturation
        import inspect
        source = inspect.getsource(TeamStatsModule._update_html_elements_with_data)
        
        integration_checks = [
            ('Appel update_facturation_data', '_update_facturation_data'),
            ('Dashboard mapping', 'dashboard_mapping')
        ]
        
        passed_checks = 2  # 2 m√©thodes trouv√©es
        for check_name, pattern in integration_checks:
            if pattern in source:
                print(f"   ‚úÖ {check_name}: Trouv√©")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Manquant")
        
        # V√©rifier la m√©thode _update_facturation_data
        facturation_source = inspect.getsource(TeamStatsModule._update_facturation_data)
        
        facturation_checks = [
            ('Extraction PA data', 'acts_data'),
            ('Extraction CM data', 'cm_data'),
            ('Calcul PA total', 'pa_total'),
            ('Calcul CM total', 'cm_total'),
            ('Stockage facturation_data', 'self.facturation_data')
        ]
        
        for check_name, pattern in facturation_checks:
            if pattern in facturation_source:
                print(f"   ‚úÖ {check_name}: Impl√©ment√©")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: Manquant")
        
        if passed_checks >= 8:  # Au moins 8 sur 9
            print(f"   ‚úÖ Int√©gration Python correcte ({passed_checks}/9)")
            return True
        else:
            print(f"   ‚ùå Int√©gration Python incompl√®te ({passed_checks}/9)")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test Python: {e}")
        return False

def main():
    """Fonction principale de test."""
    print("üöÄ Test de la Section Facturation (Billing)")
    print("=" * 80)
    
    tests_passed = 0
    total_tests = 4
    
    # Test 1: Structure HTML
    if test_facturation_html_structure():
        tests_passed += 1
        print("\n‚úÖ Test 1 R√âUSSI: Structure HTML")
    else:
        print("\n‚ùå Test 1 √âCHOU√â: Structure HTML")
    
    # Test 2: Styles CSS
    if test_facturation_css_styles():
        tests_passed += 1
        print("\n‚úÖ Test 2 R√âUSSI: Styles CSS")
    else:
        print("\n‚ùå Test 2 √âCHOU√â: Styles CSS")
    
    # Test 3: JavaScript
    if test_facturation_javascript():
        tests_passed += 1
        print("\n‚úÖ Test 3 R√âUSSI: JavaScript")
    else:
        print("\n‚ùå Test 3 √âCHOU√â: JavaScript")
    
    # Test 4: Int√©gration Python
    if test_python_integration():
        tests_passed += 1
        print("\n‚úÖ Test 4 R√âUSSI: Int√©gration Python")
    else:
        print("\n‚ùå Test 4 √âCHOU√â: Int√©gration Python")
    
    # R√©sum√©
    print("\n" + "=" * 80)
    print(f"üìä R√©sultats: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("\n‚úÖ Section Facturation compl√®tement impl√©ment√©e!")
        
        print("\nüéØ Fonctionnalit√©s livr√©es:")
        print("\nüí∞ Section Facturation:")
        print("  ‚Ä¢ ‚úÖ Input prix unitaire: Champ modifiable avec validation")
        print("  ‚Ä¢ ‚úÖ Calcul PA: Total Acts √ó prix unitaire")
        print("  ‚Ä¢ ‚úÖ Calcul CM: Total CM √ó prix unitaire")
        print("  ‚Ä¢ ‚úÖ Grand total: PA + CM")
        print("  ‚Ä¢ ‚úÖ Formatage devise: Format fran√ßais avec ‚Ç¨")
        print("  ‚Ä¢ ‚úÖ Mise √† jour temps r√©el: Recalcul automatique")
        
        print("\nüé® Design:")
        print("  ‚Ä¢ ‚úÖ Layout moderne: Gradients et effets visuels")
        print("  ‚Ä¢ ‚úÖ Couleurs diff√©renci√©es: Vert PA, Bleu CM, Or Grand Total")
        print("  ‚Ä¢ ‚úÖ Responsive: Adaptation mobile")
        print("  ‚Ä¢ ‚úÖ Animations: Focus et hover effects")
        
        print("\nüîß Int√©gration:")
        print("  ‚Ä¢ ‚úÖ Donn√©es r√©elles: Extraction depuis CM et Acts")
        print("  ‚Ä¢ ‚úÖ Synchronisation: Mise √† jour avec filtres de dates")
        print("  ‚Ä¢ ‚úÖ JavaScript: Calculs temps r√©el c√¥t√© client")
        print("  ‚Ä¢ ‚úÖ Python: Injection donn√©es serveur")
        
        print("\nüìä Exemple d'utilisation:")
        print("  Prix unitaire: ‚Ç¨2.50")
        print("  PA (Acts): 24,094 √ó ‚Ç¨2.50 = ‚Ç¨60,235.00")
        print("  CM: 1,721 √ó ‚Ç¨2.50 = ‚Ç¨4,302.50")
        print("  Grand Total: ‚Ç¨64,537.50")
        
        print("\nüöÄ Section Facturation pr√™te pour utilisation!")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - tests_passed} test(s) √©chou√©(s).")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
