#!/usr/bin/env python3
"""
Test final de la synchronisation Acts HTML ‚Üî Graphique.
"""

import sys
import os
import re
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def test_percentage_calculation_sync():
    """Test que les pourcentages HTML et graphique sont identiques."""
    print("üîç Test Final de Synchronisation des Pourcentages")
    print("=" * 60)
    
    # Donn√©es de test (ordre HTML/script.js unifi√©)
    test_data = [13244, 4889, 2391, 1775, 893, 499, 285, 39, 45, 34]
    labels = [
        'AD RAS sans temps', 'AD RAS avec temps', 'OK', 'NOK', 'AD Non jointe',
        'UPR RAS', 'AD Non trouv√©e', 'Hors commune', 'UPR NOK', 'UPR OK'
    ]
    
    total = sum(test_data)
    print(f"   üìä Total Acts: {total:,}")
    
    # Calcul des pourcentages (logique unifi√©e)
    print(f"\n   üìä Pourcentages calcul√©s:")
    for i, (label, count) in enumerate(zip(labels, test_data)):
        percentage = (count / total * 100) if total > 0 else 0
        formatted_pct = f"{percentage:.1f}%"
        print(f"      {i+1}. {label}: {count:,} ({formatted_pct})")
    
    # V√©rifier que le total fait ~100%
    total_percentage = sum((count / total * 100) for count in test_data)
    if 99.9 <= total_percentage <= 100.1:
        print(f"\n   ‚úÖ Total des pourcentages coh√©rent: {total_percentage:.1f}%")
    else:
        print(f"\n   ‚ùå Total des pourcentages incoh√©rent: {total_percentage:.1f}%")
        return False
    
    print(f"   ‚úÖ Calculs de pourcentages corrects!")
    return True

def test_html_structure_ready():
    """Test que la structure HTML est pr√™te pour les mises √† jour."""
    print("\nüîç Test de la Structure HTML")
    print("=" * 60)
    
    try:
        html_file = Path(__file__).parent / "src" / "pres stats" / "index.html"
        with open(html_file, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # V√©rifier les √©l√©ments Acts avec pourcentages statiques
        acts_elements = [
            ('AD RAS sans temps', '52.8%'),
            ('AD RAS avec temps', '20.4%'),
            ('OK', '9.5%'),
            ('NOK', '8.2%'),
            ('AD Non jointe', '5.1%')
        ]
        
        found_elements = 0
        for label, static_pct in acts_elements:
            if f'{label} ({static_pct})' in html_content:
                print(f"   ‚úÖ √âl√©ment trouv√©: {label} ({static_pct})")
                found_elements += 1
            else:
                print(f"   ‚ùå √âl√©ment manquant: {label} ({static_pct})")
        
        if found_elements >= 4:
            print(f"   ‚úÖ Structure HTML pr√™te pour mise √† jour ({found_elements}/{len(acts_elements)})")
            return True
        else:
            print(f"   ‚ùå Structure HTML incompl√®te ({found_elements}/{len(acts_elements)})")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification HTML: {e}")
        return False

def test_script_js_tooltip_ready():
    """Test que le script.js est pr√™t avec calcul dynamique."""
    print("\nüîç Test du Script.js")
    print("=" * 60)
    
    try:
        script_file = Path(__file__).parent / "src" / "pres stats" / "script.js"
        with open(script_file, 'r', encoding='utf-8') as f:
            script_content = f.read()
        
        # V√©rifications essentielles
        checks = [
            ('Calcul dynamique total', 'const total = context.dataset.data.reduce((a, b) => a + b, 0);'),
            ('Formule pourcentage', '((context.raw / total) * 100).toFixed(1)'),
            ('Ordre AD RAS sans temps', 'AD RAS\\nsans temps'),
            ('Ordre AD RAS avec temps', 'AD RAS\\navec temps')
        ]
        
        passed_checks = 0
        for check_name, pattern in checks:
            if pattern in script_content:
                print(f"   ‚úÖ {check_name}: OK")
                passed_checks += 1
            else:
                print(f"   ‚ùå {check_name}: MANQUANT")
        
        # V√©rifier qu'il n'y a plus de total hardcod√©
        if 'const total = 11396;' not in script_content and 'const total = 24094;' not in script_content:
            print(f"   ‚úÖ Aucun total hardcod√© trouv√©")
            passed_checks += 1
        else:
            print(f"   ‚ùå Total hardcod√© encore pr√©sent")
        
        if passed_checks >= 4:
            print(f"   ‚úÖ Script.js pr√™t avec calcul dynamique ({passed_checks}/5)")
            return True
        else:
            print(f"   ‚ùå Script.js pas pr√™t ({passed_checks}/5)")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification script.js: {e}")
        return False

def test_python_code_ready():
    """Test que le code Python est pr√™t avec l'ordre correct."""
    print("\nüîç Test du Code Python")
    print("=" * 60)
    
    try:
        from ui.modules.team_stats_module import TeamStatsModule
        
        # V√©rifier que les m√©thodes existent
        required_methods = [
            '_extract_acts_data_for_dashboard',
            '_update_html_elements_with_data'
        ]
        
        for method_name in required_methods:
            if hasattr(TeamStatsModule, method_name):
                print(f"   ‚úÖ M√©thode {method_name}: OK")
            else:
                print(f"   ‚ùå M√©thode {method_name}: MANQUANTE")
                return False
        
        # V√©rifier le code source pour l'ordre correct
        import inspect
        source = inspect.getsource(TeamStatsModule._extract_acts_data_for_dashboard)
        
        if 'AD RAS sans temps' in source and 'AD RAS avec temps' in source:
            if source.find('AD RAS sans temps') < source.find('AD RAS avec temps'):
                print(f"   ‚úÖ Ordre correct: AD RAS sans temps en premier")
            else:
                print(f"   ‚ùå Ordre incorrect: AD RAS avec temps en premier")
                return False
        else:
            print(f"   ‚ùå Labels AD RAS non trouv√©s dans le code")
            return False
        
        print(f"   ‚úÖ Code Python pr√™t avec ordre correct")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification Python: {e}")
        return False

def main():
    """Fonction principale de test."""
    print("üöÄ Test Final de Synchronisation Acts HTML ‚Üî Graphique")
    print("=" * 80)
    
    tests_passed = 0
    total_tests = 4
    
    # Test 1: Calculs de pourcentages
    if test_percentage_calculation_sync():
        tests_passed += 1
        print("\n‚úÖ Test 1 R√âUSSI: Calculs de pourcentages")
    else:
        print("\n‚ùå Test 1 √âCHOU√â: Calculs de pourcentages")
    
    # Test 2: Structure HTML
    if test_html_structure_ready():
        tests_passed += 1
        print("\n‚úÖ Test 2 R√âUSSI: Structure HTML")
    else:
        print("\n‚ùå Test 2 √âCHOU√â: Structure HTML")
    
    # Test 3: Script.js
    if test_script_js_tooltip_ready():
        tests_passed += 1
        print("\n‚úÖ Test 3 R√âUSSI: Script.js")
    else:
        print("\n‚ùå Test 3 √âCHOU√â: Script.js")
    
    # Test 4: Code Python
    if test_python_code_ready():
        tests_passed += 1
        print("\n‚úÖ Test 4 R√âUSSI: Code Python")
    else:
        print("\n‚ùå Test 4 √âCHOU√â: Code Python")
    
    # R√©sum√©
    print("\n" + "=" * 80)
    print(f"üìä R√©sultats: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("\n‚úÖ Synchronisation Acts HTML ‚Üî Graphique COMPL√àTE!")
        
        print("\nüéØ Corrections apport√©es:")
        print("  ‚Ä¢ ‚úÖ Ordre unifi√©: AD RAS sans temps en premier (plus fr√©quent)")
        print("  ‚Ä¢ ‚úÖ Script.js: Calcul dynamique du total (plus de hardcod√©)")
        print("  ‚Ä¢ ‚úÖ Python: Ordre correct dans chart_labels_order")
        print("  ‚Ä¢ ‚úÖ HTML: Patterns pr√™ts pour mise √† jour des pourcentages")
        print("  ‚Ä¢ ‚úÖ Formule identique: (count/total)*100 partout")
        
        print("\nüìä Exemple de synchronisation:")
        print("  Donn√©es: AD RAS sans temps = 13,244 sur 24,094 total")
        print("  Calcul: (13244/24094)*100 = 55.0%")
        print("  HTML: 'AD RAS sans temps (55.0%)'")
        print("  Tooltip: 'AD RAS sans temps: 13,244 (55.0%)'")
        print("  ‚Üí PARFAITEMENT SYNCHRONIS√â!")
        
        print("\nüîÑ Workflow utilisateur:")
        print("  1. Charger fichier Suivi Global Excel")
        print("  2. S√©lectionner plage de dates")
        print("  3. G√©n√©rer dashboard")
        print("  4. Voir pourcentages coh√©rents partout")
        print("  5. HTML text = Graphique tooltips ‚úÖ")
        
        print("\nüöÄ Pr√™t pour test avec donn√©es r√©elles!")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - tests_passed} test(s) √©chou√©(s).")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
