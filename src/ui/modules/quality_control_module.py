"""
Module 5: Contr√¥le Qualit√© - Pladria v3.0
Syst√®me de contr√¥le qualit√© pour l'analyse et la validation des donn√©es.
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import logging
import os
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, List, Any, Tuple

# Import des utilitaires Pladria
from config.constants import COLORS, AppInfo, TeamsConfig, UIConfig
from utils.logging_config import setup_logging
from utils.lazy_imports import get_pandas
from utils.performance import run_async_task
from utils.file_utils import check_file_access


class QualityControlModule:
    """Module de contr√¥le qualit√© pour Pladria v3.0."""
    
    def __init__(self, parent: tk.Widget, navigation_manager=None):
        """
        Initialise le module de contr√¥le qualit√©.

        Args:
            parent: Widget parent (fen√™tre principale)
            navigation_manager: Gestionnaire de navigation (optionnel)
        """
        self.parent = parent
        self.navigation_manager = navigation_manager
        self.logger = logging.getLogger(__name__)

        # Variables de donn√©es
        self.qgis_data = None  # Donn√©es du fichier r√©sultats QGis
        self.suivi_data = None  # Donn√©es du fichier suivi commune
        self.qc_results = None  # R√©sultats de l'analyse qualit√©
        self.current_qgis_file_path = None
        self.current_suivi_file_path = None

        # Variables d'interface
        self.main_frame = None
        self.progress_var = None
        self.progress_bar = None
        self.status_label = None

        # Variables de s√©lection
        self.collaborator_var = tk.StringVar()
        self.commune_var = tk.StringVar()
        self.insee_var = tk.StringVar()
        self.id_tache_var = tk.StringVar()

        # Donn√©es d√©tect√©es
        self.detected_info = {}

        # Configuration Teams
        self.teams_folder_path = TeamsConfig.get_teams_base_path()

        # Configuration
        self.setup_ui()

        self.logger.info("Module Contr√¥le Qualit√© initialis√©")
    
    def setup_ui(self):
        """Configure l'interface utilisateur ultra-compacte sans scrolling."""
        try:
            # Frame principal direct sans scrolling - ultra compact
            self.main_frame = tk.Frame(self.parent, bg=COLORS['BG'])
            self.main_frame.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)

            # Layout en grille pour maximiser l'espace
            self.main_frame.grid_rowconfigure(0, weight=0)  # Header compact
            self.main_frame.grid_rowconfigure(1, weight=1)  # Contenu principal
            self.main_frame.grid_rowconfigure(2, weight=0)  # Status compact
            self.main_frame.grid_columnconfigure(0, weight=1)

            # Header ultra-compact
            self._create_ultra_compact_header()

            # Contenu principal en grille 2x2
            self._create_compact_main_content()

            # Status bar ultra-compact
            self._create_ultra_compact_status()

            self.logger.info("Interface utilisateur ultra-compacte cr√©√©e avec succ√®s")

        except Exception as e:
            self.logger.error(f"Erreur lors de la cr√©ation de l'interface QC: {e}")
            import traceback
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            messagebox.showerror("Erreur", f"Impossible de cr√©er l'interface du module:\n{e}")

    def _create_ultra_compact_header(self):
        """Cr√©e un header ultra-compact en une seule ligne."""
        header_frame = tk.Frame(self.main_frame, bg=COLORS['CARD'], height=35)
        header_frame.grid(row=0, column=0, sticky="ew", padx=2, pady=1)
        header_frame.pack_propagate(False)
        header_frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        # Contenu en ligne horizontale
        content = tk.Frame(header_frame, bg=COLORS['CARD'])
        content.pack(fill=tk.BOTH, expand=True, padx=8, pady=3)

        # Ic√¥ne et titre
        tk.Label(content, text="üîç", font=("Segoe UI", 12),
                fg=COLORS['PRIMARY'], bg=COLORS['CARD']).pack(side=tk.LEFT)

        tk.Label(content, text="Module 5 - Contr√¥le Qualit√©",
                font=("Segoe UI", 10, "bold"), fg=COLORS['PRIMARY'],
                bg=COLORS['CARD']).pack(side=tk.LEFT, padx=(5, 15))

        # Indicateurs de statut en ligne
        self._create_inline_status_indicators(content)

    def _create_inline_status_indicators(self, parent: tk.Widget):
        """Cr√©e les indicateurs de statut en ligne."""
        # S√©parateur
        tk.Label(parent, text="|", font=("Segoe UI", 10),
                fg=COLORS['BORDER'], bg=COLORS['CARD']).pack(side=tk.LEFT, padx=5)

        # Indicateur fichiers
        self.files_status = tk.Label(parent, text="üìÅ Fichiers: En attente",
                                   font=("Segoe UI", 8), fg=COLORS['INFO'],
                                   bg=COLORS['CARD'])
        self.files_status.pack(side=tk.LEFT, padx=5)

        # Indicateur analyse
        self.analysis_status = tk.Label(parent, text="üîç Analyse: Non effectu√©e",
                                      font=("Segoe UI", 8), fg=COLORS['TEXT_SECONDARY'],
                                      bg=COLORS['CARD'])
        self.analysis_status.pack(side=tk.LEFT, padx=5)

        # Indicateur rapport
        self.report_status = tk.Label(parent, text="üìä Rapport: Non g√©n√©r√©",
                                    font=("Segoe UI", 8), fg=COLORS['TEXT_SECONDARY'],
                                    bg=COLORS['CARD'])
        self.report_status.pack(side=tk.LEFT, padx=5)

    def _create_compact_main_content(self):
        """Cr√©e le contenu principal en grille 2x2 ultra-compacte."""
        main_content = tk.Frame(self.main_frame, bg=COLORS['BG'])
        main_content.grid(row=1, column=0, sticky="nsew", padx=2, pady=1)

        # Configuration de la grille 2x2
        main_content.grid_rowconfigure(0, weight=1)
        main_content.grid_rowconfigure(1, weight=1)
        main_content.grid_columnconfigure(0, weight=1)
        main_content.grid_columnconfigure(1, weight=1)

        # Quadrant 1: Fichiers (haut gauche)
        self._create_files_quadrant(main_content, 0, 0)

        # Quadrant 2: Informations d√©tect√©es (haut droite)
        self._create_info_quadrant(main_content, 0, 1)

        # Quadrant 3: Analyse et crit√®res (bas gauche)
        self._create_analysis_quadrant(main_content, 1, 0)

        # Quadrant 4: R√©sultats (bas droite)
        self._create_results_quadrant(main_content, 1, 1)

    def _create_files_quadrant(self, parent: tk.Widget, row: int, col: int):
        """Quadrant 1: Chargement des fichiers ultra-compact."""
        frame = tk.Frame(parent, bg=COLORS['CARD'], relief='flat', bd=1)
        frame.grid(row=row, column=col, sticky="nsew", padx=1, pady=1)
        frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        # Titre compact
        title_frame = tk.Frame(frame, bg=COLORS['ACCENT'], height=25)
        title_frame.pack(fill=tk.X)
        title_frame.pack_propagate(False)

        tk.Label(title_frame, text="üìÅ Chargement Fichiers",
                font=("Segoe UI", 9, "bold"), fg=COLORS['PRIMARY'],
                bg=COLORS['ACCENT']).pack(pady=3)

        # Contenu
        content = tk.Frame(frame, bg=COLORS['CARD'])
        content.pack(fill=tk.BOTH, expand=True, padx=5, pady=3)

        # QGis file - ultra compact
        qgis_frame = tk.Frame(content, bg=COLORS['CARD'])
        qgis_frame.pack(fill=tk.X, pady=1)

        tk.Label(qgis_frame, text="üó∫Ô∏è QGis:", font=("Segoe UI", 8, "bold"),
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['CARD']).pack(anchor=tk.W)

        from tkinter import ttk
        self.load_qgis_button = ttk.Button(qgis_frame, text="üìÇ Importer QGis",
                                         command=self._load_qgis_file, style='Compact.TButton')
        self.load_qgis_button.pack(anchor=tk.W, pady=1)

        self.qgis_info_label = tk.Label(qgis_frame, text="‚ùå Non charg√©",
                                      font=("Segoe UI", 7), fg=COLORS['TEXT_SECONDARY'],
                                      bg=COLORS['CARD'])
        self.qgis_info_label.pack(anchor=tk.W)

        # S√©parateur mini
        tk.Frame(content, height=1, bg=COLORS['BORDER']).pack(fill=tk.X, pady=2)

        # Suivi file - ultra compact
        suivi_frame = tk.Frame(content, bg=COLORS['CARD'])
        suivi_frame.pack(fill=tk.X, pady=1)

        tk.Label(suivi_frame, text="üìã Suivi:", font=("Segoe UI", 8, "bold"),
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['CARD']).pack(anchor=tk.W)

        self.load_suivi_button = ttk.Button(suivi_frame, text="üìÇ Importer Suivi",
                                          command=self._load_suivi_file, style='Compact.TButton')
        self.load_suivi_button.pack(anchor=tk.W, pady=1)

        self.suivi_info_label = tk.Label(suivi_frame, text="‚ùå Non charg√©",
                                       font=("Segoe UI", 7), fg=COLORS['TEXT_SECONDARY'],
                                       bg=COLORS['CARD'])
        self.suivi_info_label.pack(anchor=tk.W)

    def _create_info_quadrant(self, parent: tk.Widget, row: int, col: int):
        """Quadrant 2: Informations d√©tect√©es ultra-compact."""
        frame = tk.Frame(parent, bg=COLORS['CARD'], relief='flat', bd=1)
        frame.grid(row=row, column=col, sticky="nsew", padx=1, pady=1)
        frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        # Titre compact
        title_frame = tk.Frame(frame, bg=COLORS['ACCENT'], height=25)
        title_frame.pack(fill=tk.X)
        title_frame.pack_propagate(False)

        tk.Label(title_frame, text="üìã Informations D√©tect√©es",
                font=("Segoe UI", 9, "bold"), fg=COLORS['PRIMARY'],
                bg=COLORS['ACCENT']).pack(pady=3)

        # Contenu en grille 2x2
        content = tk.Frame(frame, bg=COLORS['CARD'])
        content.pack(fill=tk.BOTH, expand=True, padx=5, pady=3)
        content.grid_columnconfigure(0, weight=1)
        content.grid_columnconfigure(1, weight=1)

        # Ligne 1
        self._create_mini_info_field(content, 0, 0, "üë§", "Collaborateur", self.collaborator_var)
        self._create_mini_info_field(content, 0, 1, "üèòÔ∏è", "Commune", self.commune_var)

        # Ligne 2
        self._create_mini_info_field(content, 1, 0, "üèõÔ∏è", "INSEE", self.insee_var)
        self._create_mini_info_field(content, 1, 1, "üÜî", "ID T√¢che", self.id_tache_var)

        # Note ultra-compacte
        note = tk.Label(content, text="‚ÑπÔ∏è Auto-d√©tection depuis fichier suivi",
                       font=("Segoe UI", 7), fg=COLORS['INFO'], bg=COLORS['CARD'])
        note.grid(row=2, column=0, columnspan=2, sticky="w", pady=(3, 0))

    def _create_mini_info_field(self, parent: tk.Widget, row: int, col: int,
                               icon: str, label: str, var: tk.StringVar):
        """Cr√©e un champ d'information mini."""
        field_frame = tk.Frame(parent, bg=COLORS['CARD'])
        field_frame.grid(row=row, column=col, sticky="ew", padx=2, pady=1)

        # Header en ligne
        header = tk.Frame(field_frame, bg=COLORS['CARD'])
        header.pack(fill=tk.X)

        tk.Label(header, text=icon, font=("Segoe UI", 8),
                fg=COLORS['SECONDARY'], bg=COLORS['CARD']).pack(side=tk.LEFT)

        tk.Label(header, text=f"{label}:", font=("Segoe UI", 7, "bold"),
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['CARD']).pack(side=tk.LEFT, padx=(2, 0))

        # Valeur
        value_label = tk.Label(field_frame, textvariable=var, font=("Segoe UI", 7),
                              fg=COLORS['INFO'], bg=COLORS['CARD'], anchor='w')
        value_label.pack(fill=tk.X)

        # Stocker pour mise √† jour
        if not hasattr(self, 'info_displays'):
            self.info_displays = {}
        self.info_displays[label.lower()] = value_label

    def _create_analysis_quadrant(self, parent: tk.Widget, row: int, col: int):
        """Quadrant 3: Analyse et crit√®res ultra-compact."""
        frame = tk.Frame(parent, bg=COLORS['CARD'], relief='flat', bd=1)
        frame.grid(row=row, column=col, sticky="nsew", padx=1, pady=1)
        frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        # Titre compact
        title_frame = tk.Frame(frame, bg=COLORS['ACCENT'], height=25)
        title_frame.pack(fill=tk.X)
        title_frame.pack_propagate(False)

        tk.Label(title_frame, text="üîç Analyse Qualit√©",
                font=("Segoe UI", 9, "bold"), fg=COLORS['PRIMARY'],
                bg=COLORS['ACCENT']).pack(pady=3)

        # Contenu
        content = tk.Frame(frame, bg=COLORS['CARD'])
        content.pack(fill=tk.BOTH, expand=True, padx=5, pady=3)

        # Crit√®res ultra-compacts
        criteria_frame = tk.Frame(content, bg=COLORS['LIGHT'], relief='flat', bd=1)
        criteria_frame.pack(fill=tk.X, pady=(0, 3))
        criteria_frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        criteria_content = tk.Frame(criteria_frame, bg=COLORS['LIGHT'])
        criteria_content.pack(fill=tk.X, padx=3, pady=2)

        # Crit√®re 0
        c0_frame = tk.Frame(criteria_content, bg=COLORS['LIGHT'])
        c0_frame.pack(fill=tk.X, pady=1)

        tk.Label(c0_frame, text="0", font=("Segoe UI", 7, "bold"),
                fg='white', bg=COLORS['SECONDARY'], padx=3, pady=1).pack(side=tk.LEFT)
        tk.Label(c0_frame, text="Incoh√©rences fichiers", font=("Segoe UI", 7),
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(3, 0))

        # Crit√®re 1
        c1_frame = tk.Frame(criteria_content, bg=COLORS['LIGHT'])
        c1_frame.pack(fill=tk.X, pady=1)

        tk.Label(c1_frame, text="1", font=("Segoe UI", 7, "bold"),
                fg='white', bg=COLORS['SECONDARY'], padx=3, pady=1).pack(side=tk.LEFT)
        tk.Label(c1_frame, text="Doublons IMB", font=("Segoe UI", 7),
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(3, 0))

        # Crit√®re 3
        c3_frame = tk.Frame(criteria_content, bg=COLORS['LIGHT'])
        c3_frame.pack(fill=tk.X, pady=1)
        tk.Label(c3_frame, text="CRIT√àRE 3", font=("Segoe UI", 7, "bold"),
                fg='white', bg=COLORS['SECONDARY'], padx=3, pady=1).pack(side=tk.LEFT)
        tk.Label(c3_frame, text="Contr√¥le IMB Doublons", font=("Segoe UI", 7),
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(3, 0))

        # Crit√®re 4
        c4_frame = tk.Frame(criteria_content, bg=COLORS['LIGHT'])
        c4_frame.pack(fill=tk.X, pady=1)
        tk.Label(c4_frame, text="CRIT√àRE 4", font=("Segoe UI", 7, "bold"),
                fg='white', bg=COLORS['SECONDARY'], padx=3, pady=1).pack(side=tk.LEFT)
        tk.Label(c4_frame, text="AD √† Analyser", font=("Segoe UI", 7),
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(3, 0))

        # Boutons d'action
        buttons_frame = tk.Frame(content, bg=COLORS['CARD'])
        buttons_frame.pack(fill=tk.X, pady=(3, 0))

        from tkinter import ttk
        self.analyze_button = ttk.Button(buttons_frame, text="üîç Analyser",
                                       command=self._run_quality_analysis,
                                       style='CompactWarning.TButton', state='disabled')
        self.analyze_button.pack(side=tk.LEFT, padx=(0, 3))

        self.export_button = ttk.Button(buttons_frame, text="üì§ Exporter",
                                      command=self._export_qc_report,
                                      style='Compact.TButton', state='disabled')
        self.export_button.pack(side=tk.LEFT)

    def _create_results_quadrant(self, parent: tk.Widget, row: int, col: int):
        """Quadrant 4: R√©sultats ultra-compact."""
        frame = tk.Frame(parent, bg=COLORS['CARD'], relief='flat', bd=1)
        frame.grid(row=row, column=col, sticky="nsew", padx=1, pady=1)
        frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        # Titre compact
        title_frame = tk.Frame(frame, bg=COLORS['ACCENT'], height=25)
        title_frame.pack(fill=tk.X)
        title_frame.pack_propagate(False)

        tk.Label(title_frame, text="üìä R√©sultats",
                font=("Segoe UI", 9, "bold"), fg=COLORS['PRIMARY'],
                bg=COLORS['ACCENT']).pack(pady=3)

        # Zone de r√©sultats
        self.results_frame = tk.Frame(frame, bg=COLORS['CARD'])
        self.results_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=3)

        # Message initial ultra-compact
        self.results_label = tk.Label(
            self.results_frame,
            text="‚è≥ En attente\n\nChargez les fichiers\net lancez l'analyse",
            font=("Segoe UI", 8),
            fg=COLORS['TEXT_SECONDARY'],
            bg=COLORS['CARD'],
            justify=tk.CENTER
        )
        self.results_label.pack(expand=True)

    def _create_ultra_compact_status(self):
        """Cr√©e la barre de statut ultra-compacte."""
        status_frame = tk.Frame(self.main_frame, bg=COLORS['LIGHT'], height=25)
        status_frame.grid(row=2, column=0, sticky="ew", padx=2, pady=1)
        status_frame.pack_propagate(False)
        status_frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        # Contenu en ligne
        content = tk.Frame(status_frame, bg=COLORS['LIGHT'])
        content.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)

        # Progress bar mini
        from tkinter import ttk
        self.progress_var = tk.DoubleVar()

        tk.Label(content, text="Progression:", font=("Segoe UI", 8),
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['LIGHT']).pack(side=tk.LEFT)

        self.progress_bar = ttk.Progressbar(content, variable=self.progress_var,
                                          maximum=100, length=150)
        self.progress_bar.pack(side=tk.LEFT, padx=(5, 10))

        # Status label
        self.status_label = tk.Label(content, text="Pr√™t - En attente des fichiers",
                                   font=("Segoe UI", 8), fg=COLORS['INFO'],
                                   bg=COLORS['LIGHT'])
        self.status_label.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # Cr√©er un status_icon factice pour compatibilit√©
        self.status_icon = self.status_label
    
    def _create_modern_header(self, parent: tk.Widget):
        """Cr√©e l'en-t√™te moderne du module avec style Sofrecom."""
        try:
            from ui.styles import create_sofrecom_card

            # Conteneur principal pour l'en-t√™te
            header_container = tk.Frame(parent, bg=COLORS['BG'])
            header_container.pack(fill=tk.X, pady=(0, 20))

            # Carte d'en-t√™te avec style Sofrecom
            header_card = create_sofrecom_card(
                header_container,
                title="Module 5 - Contr√¥le Qualit√©",
                subtitle="Syst√®me d'Analyse et de Validation de la Qualit√© des Donn√©es",
                description="Comparez les fichiers QGis et Teams pour d√©tecter les incoh√©rences et doublons automatiquement",
                icon="üîç",
                clickable=False
            )
            header_card.pack(fill=tk.X, padx=5, pady=5)

            # Indicateurs de statut rapide
            self._create_quick_status_indicators(header_container)

        except Exception as e:
            self.logger.warning(f"Fallback to basic header: {e}")
            # Fallback to basic header
            header_frame = tk.Frame(parent, bg=COLORS['CARD'])
            header_frame.pack(fill=tk.X, pady=(0, 20))

            title_label = tk.Label(
                header_frame,
                text="üîç Module 5 - Contr√¥le Qualit√©",
                font=("Segoe UI", 16, "bold"),
                fg=COLORS['PRIMARY'],
                bg=COLORS['CARD']
            )
            title_label.pack(pady=10)

            desc_label = tk.Label(
                header_frame,
                text="Syst√®me d'analyse et de validation de la qualit√© des donn√©es",
                font=("Segoe UI", 10),
                fg=COLORS['TEXT_SECONDARY'],
                bg=COLORS['CARD']
            )
            desc_label.pack(pady=(0, 10))
    
    def _create_modern_data_loading_section(self, parent: tk.Widget):
        """Cr√©e la section moderne de chargement des donn√©es avec cartes."""
        from ui.styles import create_sofrecom_card

        # Conteneur principal
        section_container = tk.Frame(parent, bg=COLORS['BG'])
        section_container.pack(fill=tk.X, pady=(0, 20))

        # Titre de section
        section_title = tk.Label(
            section_container,
            text="üìÅ Chargement des Donn√©es",
            font=UIConfig.FONT_HEADER,
            fg=COLORS['PRIMARY'],
            bg=COLORS['BG']
        )
        section_title.pack(anchor=tk.W, padx=5, pady=(0, 10))

        # Grille pour les cartes de fichiers
        files_grid = tk.Frame(section_container, bg=COLORS['BG'])
        files_grid.pack(fill=tk.X, padx=5)
        files_grid.grid_columnconfigure(0, weight=1)
        files_grid.grid_columnconfigure(1, weight=1)

        # Carte 1: Fichier QGis
        self._create_qgis_file_card(files_grid)

        # Carte 2: Fichier Suivi
        self._create_suivi_file_card(files_grid)

    def _create_quick_status_indicators(self, parent: tk.Widget):
        """Cr√©e les indicateurs de statut rapide."""
        try:
            indicators_frame = tk.Frame(parent, bg=COLORS['BG'])
            indicators_frame.pack(fill=tk.X, padx=5, pady=(10, 0))

            # Grille pour les indicateurs
            indicators_frame.grid_columnconfigure(0, weight=1)
            indicators_frame.grid_columnconfigure(1, weight=1)
            indicators_frame.grid_columnconfigure(2, weight=1)

            # Indicateur 1: Fichiers charg√©s
            self.files_indicator = self._create_status_card(
                indicators_frame, 0, 0, "üìÅ", "Fichiers", "En attente", COLORS['INFO']
            )

            # Indicateur 2: Analyse
            self.analysis_indicator = self._create_status_card(
                indicators_frame, 0, 1, "üîç", "Analyse", "Non effectu√©e", COLORS['TEXT_SECONDARY']
            )

            # Indicateur 3: Rapport
            self.report_indicator = self._create_status_card(
                indicators_frame, 0, 2, "üìä", "Rapport", "Non g√©n√©r√©", COLORS['TEXT_SECONDARY']
            )
        except Exception as e:
            self.logger.warning(f"Could not create status indicators: {e}")
            # Create dummy indicators to avoid errors
            self.files_indicator = tk.Frame(parent)
            self.analysis_indicator = tk.Frame(parent)
            self.report_indicator = tk.Frame(parent)

    def _create_status_card(self, parent: tk.Widget, row: int, col: int,
                           icon: str, title: str, status: str, color: str) -> tk.Frame:
        """Cr√©e une carte d'indicateur de statut."""
        card_frame = tk.Frame(parent, bg=COLORS['CARD'], relief='flat', bd=1)
        card_frame.grid(row=row, column=col, sticky="ew", padx=3, pady=3)
        card_frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        # Contenu de la carte
        content = tk.Frame(card_frame, bg=COLORS['CARD'])
        content.pack(fill=tk.BOTH, expand=True, padx=8, pady=6)

        # Ic√¥ne et titre
        header = tk.Frame(content, bg=COLORS['CARD'])
        header.pack(fill=tk.X)

        icon_label = tk.Label(header, text=icon, font=("Segoe UI", 12),
                             fg=color, bg=COLORS['CARD'])
        icon_label.pack(side=tk.LEFT)

        title_label = tk.Label(header, text=title, font=UIConfig.FONT_SUBTITLE,
                              fg=COLORS['TEXT_PRIMARY'], bg=COLORS['CARD'])
        title_label.pack(side=tk.LEFT, padx=(5, 0))

        # Statut
        status_label = tk.Label(content, text=status, font=UIConfig.FONT_SMALL,
                               fg=color, bg=COLORS['CARD'])
        status_label.pack(anchor=tk.W, pady=(2, 0))

        # Stocker les labels pour mise √† jour
        card_frame.icon_label = icon_label
        card_frame.status_label = status_label

        return card_frame

    def _create_qgis_file_card(self, parent: tk.Widget):
        """Cr√©e la carte pour le fichier QGis."""
        from ui.styles import create_card_frame

        # Carte QGis
        qgis_card = create_card_frame(parent, shadow=True)
        qgis_card.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)

        # Contenu de la carte
        card_content = qgis_card.winfo_children()[0] if qgis_card.winfo_children() else qgis_card
        content_frame = tk.Frame(card_content, bg=COLORS['CARD'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        # En-t√™te avec ic√¥ne
        header_frame = tk.Frame(content_frame, bg=COLORS['CARD'])
        header_frame.pack(fill=tk.X, pady=(0, 10))

        tk.Label(
            header_frame,
            text="üó∫Ô∏è",
            font=("Segoe UI", 16),
            fg=COLORS['PRIMARY'],
            bg=COLORS['CARD']
        ).pack(side=tk.LEFT)

        tk.Label(
            header_frame,
            text="Fichier R√©sultats QGis",
            font=UIConfig.FONT_CARD_TITLE,
            fg=COLORS['PRIMARY'],
            bg=COLORS['CARD']
        ).pack(side=tk.LEFT, padx=(8, 0))

        # Description
        desc_label = tk.Label(
            content_frame,
            text="Fichier Excel contenant les r√©sultats d'analyse QGis\n(Colonnes A-J requises)",
            font=UIConfig.FONT_SMALL,
            fg=COLORS['TEXT_SECONDARY'],
            bg=COLORS['CARD'],
            justify=tk.LEFT
        )
        desc_label.pack(anchor=tk.W, pady=(0, 15))

        # Bouton d'import moderne
        from tkinter import ttk
        self.load_qgis_button = ttk.Button(
            content_frame,
            text="üìÇ Importer Fichier QGis",
            command=self._load_qgis_file,
            style='Primary.TButton'
        )
        self.load_qgis_button.pack(anchor=tk.W, pady=(0, 10))

        # Statut du fichier
        self.qgis_info_label = tk.Label(
            content_frame,
            text="‚ùå Aucun fichier QGis charg√©",
            font=UIConfig.FONT_SMALL,
            fg=COLORS['TEXT_SECONDARY'],
            bg=COLORS['CARD']
        )
        self.qgis_info_label.pack(anchor=tk.W)

    def _create_suivi_file_card(self, parent: tk.Widget):
        """Cr√©e la carte pour le fichier Suivi."""
        from ui.styles import create_card_frame

        # Carte Suivi
        suivi_card = create_card_frame(parent, shadow=True)
        suivi_card.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)

        # Contenu de la carte
        card_content = suivi_card.winfo_children()[0] if suivi_card.winfo_children() else suivi_card
        content_frame = tk.Frame(card_content, bg=COLORS['CARD'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        # En-t√™te avec ic√¥ne
        header_frame = tk.Frame(content_frame, bg=COLORS['CARD'])
        header_frame.pack(fill=tk.X, pady=(0, 10))

        tk.Label(
            header_frame,
            text="üìã",
            font=("Segoe UI", 16),
            fg=COLORS['SUCCESS'],
            bg=COLORS['CARD']
        ).pack(side=tk.LEFT)

        tk.Label(
            header_frame,
            text="Fichier Suivi Commune",
            font=UIConfig.FONT_CARD_TITLE,
            fg=COLORS['SUCCESS'],
            bg=COLORS['CARD']
        ).pack(side=tk.LEFT, padx=(8, 0))

        # Description
        desc_label = tk.Label(
            content_frame,
            text="Fichier de suivi commune Teams\n(Feuille 3 utilis√©e pour l'analyse)",
            font=UIConfig.FONT_SMALL,
            fg=COLORS['TEXT_SECONDARY'],
            bg=COLORS['CARD'],
            justify=tk.LEFT
        )
        desc_label.pack(anchor=tk.W, pady=(0, 15))

        # Bouton d'import moderne
        from tkinter import ttk
        self.load_suivi_button = ttk.Button(
            content_frame,
            text="üìÇ Importer Fichier Suivi",
            command=self._load_suivi_file,
            style='Success.TButton'
        )
        self.load_suivi_button.pack(anchor=tk.W, pady=(0, 10))

        # Statut du fichier
        self.suivi_info_label = tk.Label(
            content_frame,
            text="‚ùå Aucun fichier suivi charg√©",
            font=UIConfig.FONT_SMALL,
            fg=COLORS['TEXT_SECONDARY'],
            bg=COLORS['CARD']
        )
        self.suivi_info_label.pack(anchor=tk.W)
    
    def _create_modern_info_section(self, parent: tk.Widget):
        """Cr√©e la section moderne d'informations d√©tect√©es."""
        from ui.styles import create_card_frame

        # Conteneur principal
        section_container = tk.Frame(parent, bg=COLORS['BG'])
        section_container.pack(fill=tk.X, pady=(0, 20))

        # Titre de section
        section_title = tk.Label(
            section_container,
            text="üìã Informations D√©tect√©es Automatiquement",
            font=UIConfig.FONT_HEADER,
            fg=COLORS['PRIMARY'],
            bg=COLORS['BG']
        )
        section_title.pack(anchor=tk.W, padx=5, pady=(0, 10))

        # Carte d'informations
        info_card = create_card_frame(section_container, shadow=True)
        info_card.pack(fill=tk.X, padx=5, pady=5)

        # Contenu de la carte
        card_content = info_card.winfo_children()[0] if info_card.winfo_children() else info_card
        content_frame = tk.Frame(card_content, bg=COLORS['CARD'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)

        # Grille pour les informations
        content_frame.grid_columnconfigure(0, weight=1)
        content_frame.grid_columnconfigure(1, weight=1)

        # Informations d√©tect√©es
        self._create_info_field(content_frame, 0, 0, "üë§", "Collaborateur", self.collaborator_var)
        self._create_info_field(content_frame, 0, 1, "üèòÔ∏è", "Commune", self.commune_var)
        self._create_info_field(content_frame, 1, 0, "üèõÔ∏è", "Code INSEE", self.insee_var)
        self._create_info_field(content_frame, 1, 1, "üÜî", "ID T√¢che", self.id_tache_var)

        # Note explicative
        note_label = tk.Label(
            content_frame,
            text="‚ÑπÔ∏è Ces informations sont extraites automatiquement du fichier de suivi commune",
            font=UIConfig.FONT_SMALL,
            fg=COLORS['INFO'],
            bg=COLORS['CARD']
        )
        note_label.grid(row=2, column=0, columnspan=2, sticky="w", pady=(15, 0))

    def _create_info_field(self, parent: tk.Widget, row: int, col: int,
                          icon: str, label: str, var: tk.StringVar):
        """Cr√©e un champ d'information moderne."""
        field_frame = tk.Frame(parent, bg=COLORS['CARD'])
        field_frame.grid(row=row, column=col, sticky="ew", padx=10, pady=8)

        # En-t√™te avec ic√¥ne
        header_frame = tk.Frame(field_frame, bg=COLORS['CARD'])
        header_frame.pack(fill=tk.X)

        icon_label = tk.Label(
            header_frame,
            text=icon,
            font=("Segoe UI", 12),
            fg=COLORS['SECONDARY'],
            bg=COLORS['CARD']
        )
        icon_label.pack(side=tk.LEFT)

        label_text = tk.Label(
            header_frame,
            text=label,
            font=UIConfig.FONT_SUBTITLE,
            fg=COLORS['TEXT_PRIMARY'],
            bg=COLORS['CARD']
        )
        label_text.pack(side=tk.LEFT, padx=(5, 0))

        # Valeur d√©tect√©e
        value_label = tk.Label(
            field_frame,
            textvariable=var,
            font=UIConfig.FONT_SMALL,
            fg=COLORS['INFO'],
            bg=COLORS['CARD'],
            anchor='w'
        )
        value_label.pack(fill=tk.X, pady=(3, 0))

        # Stocker pour mise √† jour
        if not hasattr(self, 'info_displays'):
            self.info_displays = {}
        self.info_displays[label.lower()] = value_label

    def _create_modern_analysis_section(self, parent: tk.Widget):
        """Cr√©e la section moderne d'analyse et r√©sultats."""
        from ui.styles import create_card_frame

        # Conteneur principal
        section_container = tk.Frame(parent, bg=COLORS['BG'])
        section_container.pack(fill=tk.X, pady=(0, 20))

        # Titre de section
        section_title = tk.Label(
            section_container,
            text="üîç Analyse de Contr√¥le Qualit√©",
            font=UIConfig.FONT_HEADER,
            fg=COLORS['PRIMARY'],
            bg=COLORS['BG']
        )
        section_title.pack(anchor=tk.W, padx=5, pady=(0, 10))

        # Carte d'analyse
        analysis_card = create_card_frame(section_container, shadow=True)
        analysis_card.pack(fill=tk.X, padx=5, pady=5)

        # Contenu de la carte
        card_content = analysis_card.winfo_children()[0] if analysis_card.winfo_children() else analysis_card
        content_frame = tk.Frame(card_content, bg=COLORS['CARD'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)

        # Description des crit√®res
        criteria_frame = tk.Frame(content_frame, bg=COLORS['CARD'])
        criteria_frame.pack(fill=tk.X, pady=(0, 15))

        criteria_title = tk.Label(
            criteria_frame,
            text="Crit√®res d'Analyse",
            font=UIConfig.FONT_CARD_TITLE,
            fg=COLORS['PRIMARY'],
            bg=COLORS['CARD']
        )
        criteria_title.pack(anchor=tk.W, pady=(0, 8))

        # Crit√®re 0
        self._create_criteria_info(criteria_frame, "0", "√âcart Plan Adressage",
                                  "Compare les motifs sp√©cifiques: AD RAS, OK, NOK, UPR RAS, UPR OK, UPR NOK, Hors Commune")

        # Crit√®re 2
        self._create_criteria_info(criteria_frame, "2", "Oubli Ticket UPR et 501/511",
                                  "V√©rifie si les tickets UPR et 501/511 ont √©t√© d√©pos√©s selon les motifs")

        # Crit√®re 3
        self._create_criteria_info(criteria_frame, "3", "Contr√¥le IMB Doublons",
                                  "D√©tecte les doublons IMB suspects avec motifs identiques et adresses BAN diff√©rentes")

        # Crit√®re 4
        self._create_criteria_info(criteria_frame, "4", "D√©tection AD √† Analyser",
                                  "D√©tecte les motifs 'ad √† analyser' avec IMB pr√©sent pour analyse approfondie")

        # Crit√®re 5
        self._create_criteria_info(criteria_frame, "5", "Motif Incorrect",
                                  "D√©tecte les motifs non conformes (diff√©rents des 7 motifs autoris√©s)")

        # Bouton d'analyse moderne
        button_frame = tk.Frame(content_frame, bg=COLORS['CARD'])
        button_frame.pack(fill=tk.X, pady=(15, 0))

        from tkinter import ttk
        self.analyze_button = ttk.Button(
            button_frame,
            text="üîç Lancer Analyse Qualit√©",
            command=self._run_quality_analysis,
            style='CompactWarning.TButton',
            state='disabled'
        )
        self.analyze_button.pack(side=tk.LEFT)

        # Bouton d'export
        self.export_button = ttk.Button(
            button_frame,
            text="üì§ Exporter Rapport",
            command=self._export_qc_report,
            style='Compact.TButton',
            state='disabled'
        )
        self.export_button.pack(side=tk.LEFT, padx=(10, 0))

        # Zone de r√©sultats
        self._create_results_display(content_frame)

    def _create_criteria_info(self, parent: tk.Widget, number: str, title: str, description: str):
        """Cr√©e l'affichage d'un crit√®re d'analyse."""
        criteria_frame = tk.Frame(parent, bg=COLORS['LIGHT'], relief='flat', bd=1)
        criteria_frame.pack(fill=tk.X, pady=3)
        criteria_frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        content = tk.Frame(criteria_frame, bg=COLORS['LIGHT'])
        content.pack(fill=tk.X, padx=10, pady=8)

        # En-t√™te
        header = tk.Frame(content, bg=COLORS['LIGHT'])
        header.pack(fill=tk.X)

        # Badge du crit√®re
        badge = tk.Label(
            header,
            text=f"CRIT√àRE {number}",
            font=("Segoe UI", 8, "bold"),
            fg='white',
            bg=COLORS['SECONDARY'],
            padx=6,
            pady=2
        )
        badge.pack(side=tk.LEFT)

        # Titre
        title_label = tk.Label(
            header,
            text=title,
            font=UIConfig.FONT_SUBTITLE,
            fg=COLORS['TEXT_PRIMARY'],
            bg=COLORS['LIGHT']
        )
        title_label.pack(side=tk.LEFT, padx=(8, 0))

        # Description
        desc_label = tk.Label(
            content,
            text=description,
            font=UIConfig.FONT_SMALL,
            fg=COLORS['TEXT_SECONDARY'],
            bg=COLORS['LIGHT']
        )
        desc_label.pack(anchor=tk.W, pady=(5, 0))

    def _create_results_display(self, parent: tk.Widget):
        """Cr√©e la zone d'affichage des r√©sultats."""
        # S√©parateur
        separator = tk.Frame(parent, height=1, bg=COLORS['BORDER'])
        separator.pack(fill=tk.X, pady=(20, 15))

        # Titre des r√©sultats
        results_title = tk.Label(
            parent,
            text="üìä R√©sultats de l'Analyse",
            font=UIConfig.FONT_CARD_TITLE,
            fg=COLORS['PRIMARY'],
            bg=COLORS['CARD']
        )
        results_title.pack(anchor=tk.W, pady=(0, 10))

        # Zone de r√©sultats (sera remplie apr√®s analyse)
        self.results_frame = tk.Frame(parent, bg=COLORS['CARD'])
        self.results_frame.pack(fill=tk.BOTH, expand=True)

        # Message initial
        self.results_label = tk.Label(
            self.results_frame,
            text="‚è≥ Aucune analyse effectu√©e\n\nChargez les fichiers requis et cliquez sur 'Lancer Analyse Qualit√©'",
            font=UIConfig.FONT_SMALL,
            fg=COLORS['TEXT_SECONDARY'],
            bg=COLORS['CARD'],
            justify=tk.CENTER
        )
        self.results_label.pack(expand=True, pady=20)

    def _create_modern_status_section(self, parent: tk.Widget):
        """Cr√©e la section moderne de statut et progression."""
        try:
            from ui.styles import create_status_indicator

            # Conteneur de statut
            status_container = tk.Frame(parent, bg=COLORS['BG'])
            status_container.pack(fill=tk.X, pady=(10, 0))

            # Carte de statut
            status_card = tk.Frame(status_container, bg=COLORS['LIGHT'], relief='flat', bd=1)
            status_card.pack(fill=tk.X, padx=5, pady=5)
            status_card.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

            # Contenu de la carte de statut
            status_content = tk.Frame(status_card, bg=COLORS['LIGHT'])
            status_content.pack(fill=tk.X, padx=15, pady=10)

            # Barre de progression moderne
            from tkinter import ttk
            self.progress_var = tk.DoubleVar()

            progress_frame = tk.Frame(status_content, bg=COLORS['LIGHT'])
            progress_frame.pack(fill=tk.X, pady=(0, 8))

            progress_label = tk.Label(
                progress_frame,
                text="Progression:",
                font=UIConfig.FONT_SMALL,
                fg=COLORS['TEXT_PRIMARY'],
                bg=COLORS['LIGHT']
            )
            progress_label.pack(side=tk.LEFT)

            self.progress_bar = ttk.Progressbar(
                progress_frame,
                variable=self.progress_var,
                maximum=100,
                length=300
            )
            self.progress_bar.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(10, 0))

            # Indicateur de statut moderne
            self.status_icon, self.status_label = create_status_indicator(status_content, COLORS['LIGHT'])

            # Initialiser le statut
            self._update_status("waiting", "Pr√™t - En attente des fichiers")

        except Exception as e:
            self.logger.warning(f"Fallback to basic status section: {e}")
            # Fallback to basic status section
            status_frame = tk.Frame(parent, bg=COLORS['CARD'])
            status_frame.pack(fill=tk.X, pady=(10, 0))

            # Barre de progression
            self.progress_var = tk.DoubleVar()
            self.progress_bar = ttk.Progressbar(
                status_frame,
                variable=self.progress_var,
                maximum=100,
                length=400
            )
            self.progress_bar.pack(pady=(0, 5))

            # Label de statut
            self.status_label = tk.Label(
                status_frame,
                text="Pr√™t - En attente des fichiers",
                font=("Segoe UI", 9),
                fg=COLORS['TEXT_SECONDARY'],
                bg=COLORS['CARD']
            )
            self.status_label.pack()

            # Cr√©er un status_icon factice pour √©viter les erreurs
            self.status_icon = self.status_label
    
    def _update_status(self, status_type: str, message: str):
        """Met √† jour l'indicateur de statut moderne."""
        try:
            from ui.styles import update_status_indicator
            if hasattr(self, 'status_icon') and hasattr(self, 'status_label'):
                update_status_indicator(self.status_icon, self.status_label, status_type, message)
        except Exception as e:
            # Fallback to basic status update
            if hasattr(self, 'status_label'):
                self.status_label.config(text=message)
            self.logger.debug(f"Status update fallback: {e}")

    def _update_file_indicators(self):
        """Met √† jour les indicateurs de fichiers."""
        qgis_loaded = self.qgis_data is not None
        suivi_loaded = self.suivi_data is not None

        if hasattr(self, 'files_status'):
            if qgis_loaded and suivi_loaded:
                self.files_status.config(text="üìÅ Fichiers: ‚úÖ Tous charg√©s", fg=COLORS['SUCCESS'])
            elif qgis_loaded or suivi_loaded:
                self.files_status.config(text="üìÅ Fichiers: ‚ö†Ô∏è Partiels", fg=COLORS['WARNING'])
            else:
                self.files_status.config(text="üìÅ Fichiers: En attente", fg=COLORS['INFO'])

    def _update_status_card(self, card: tk.Frame, icon: str, title: str, status: str, color: str):
        """Met √† jour une carte d'indicateur de statut."""
        if hasattr(card, 'icon_label') and hasattr(card, 'status_label'):
            card.icon_label.config(text=icon, fg=color)
            card.status_label.config(text=status, fg=color)
    
    def _load_qgis_file(self):
        """Charge un fichier r√©sultats QGis pour analyse."""
        try:
            # Ouvrir dialogue de s√©lection de fichier
            file_path = filedialog.askopenfilename(
                title="S√©lectionner le fichier R√©sultats QGis",
                filetypes=[
                    ("Fichiers Excel", "*.xlsx *.xls"),
                    ("Tous les fichiers", "*.*")
                ]
            )

            if not file_path:
                return

            self._update_status("waiting", "Chargement du fichier QGis...")
            self.progress_var.set(10)

            def load_qgis():
                pd = get_pandas()

                # Lire le fichier Excel
                df = pd.read_excel(file_path, date_format=None)

                # V√©rifier les colonnes requises
                required_columns = ['A', 'J']  # num dossier site, import fantome
                if len(df.columns) < 10:  # Au moins 10 colonnes (A-J)
                    raise ValueError("Le fichier ne contient pas assez de colonnes (minimum A-J requis)")

                return df

            def on_success(df):
                self.qgis_data = df
                self.current_qgis_file_path = file_path
                filename = os.path.basename(file_path)
                self.qgis_info_label.config(
                    text=f"‚úÖ {filename} ({len(df)} lignes)",
                    fg=COLORS['SUCCESS']
                )
                self._update_status("success", "Fichier QGis charg√© avec succ√®s")
                self.progress_var.set(0)
                self._update_file_indicators()
                self._check_analysis_ready()
                self.logger.info(f"Fichier QGis charg√©: {filename}")

            def on_error(error):
                self.qgis_info_label.config(
                    text="‚ùå Erreur de chargement",
                    fg=COLORS['ERROR']
                )
                self._update_status("error", "Erreur lors du chargement QGis")
                self.progress_var.set(0)
                self._update_file_indicators()
                messagebox.showerror("Erreur", f"Impossible de charger le fichier QGis:\n{error}")
                self.logger.error(f"Erreur chargement QGis: {error}")

            # Charger de mani√®re asynchrone
            run_async_task(load_qgis, on_success, on_error, "Chargement QGis")

        except Exception as e:
            self.logger.error(f"Erreur lors de la s√©lection du fichier QGis: {e}")
            messagebox.showerror("Erreur", f"Erreur lors de la s√©lection du fichier:\n{e}")

    def _load_suivi_file(self):
        """Charge le fichier de suivi commune et d√©tecte automatiquement les informations."""
        try:
            # Ouvrir dialogue de s√©lection de fichier
            file_path = filedialog.askopenfilename(
                title="S√©lectionner le fichier Suivi Commune",
                filetypes=[
                    ("Fichiers Excel", "*.xlsx *.xls"),
                    ("Tous les fichiers", "*.*")
                ]
            )

            if not file_path:
                return

            self._update_status("waiting", "Chargement du fichier suivi...")
            self.progress_var.set(10)

            def load_suivi():
                pd = get_pandas()

                # Lire la feuille 3 (index 2) du fichier de suivi
                df = pd.read_excel(file_path, sheet_name=2, date_format=None)

                # D√©tecter automatiquement les informations
                detected_info = self._detect_info_from_suivi(df, file_path)

                return df, detected_info

            def on_success(result):
                df, detected_info = result
                self.suivi_data = df
                self.current_suivi_file_path = file_path
                self.detected_info = detected_info

                # Mettre √† jour l'affichage des informations d√©tect√©es
                self.collaborator_var.set(detected_info.get('collaborateur', 'Non d√©tect√©'))
                self.commune_var.set(detected_info.get('commune', 'Non d√©tect√©'))
                self.insee_var.set(detected_info.get('insee', 'Non d√©tect√©'))
                self.id_tache_var.set(detected_info.get('id_tache', 'Non d√©tect√©'))

                filename = os.path.basename(file_path)
                self.suivi_info_label.config(
                    text=f"‚úÖ {filename} ({len(df)} lignes)",
                    fg=COLORS['SUCCESS']
                )
                self._update_status("success", "Fichier suivi charg√© avec succ√®s")
                self.progress_var.set(0)
                self._update_file_indicators()
                self._check_analysis_ready()
                self.logger.info(f"Fichier suivi charg√©: {filename}")
                self.logger.info(f"Informations d√©tect√©es: {detected_info}")

            def on_error(error):
                self.suivi_info_label.config(
                    text="‚ùå Erreur de chargement",
                    fg=COLORS['ERROR']
                )
                self._update_status("error", "Erreur lors du chargement suivi")
                self.progress_var.set(0)
                self._update_file_indicators()
                messagebox.showerror("Erreur", f"Impossible de charger le fichier suivi:\n{error}")
                self.logger.error(f"Erreur chargement suivi: {error}")

            # Charger de mani√®re asynchrone
            run_async_task(load_suivi, on_success, on_error, "Chargement suivi")

        except Exception as e:
            self.logger.error(f"Erreur lors de la s√©lection du fichier suivi: {e}")
            messagebox.showerror("Erreur", f"Erreur lors de la s√©lection du fichier:\n{e}")

    def _detect_info_from_suivi(self, df, file_path: str) -> Dict[str, str]:
        """D√©tecte automatiquement les informations depuis le fichier de suivi."""
        try:
            pd = get_pandas()
            detected = {}

            # 1. D√©tecter le nom de la commune depuis la colonne A (index 0) - Page 3
            if len(df.columns) >= 1:
                commune_column = df.iloc[:, 0]  # Colonne A
                # Chercher le premier nom de commune non vide
                for commune in commune_column:
                    if pd.notna(commune) and str(commune).strip() and str(commune).strip() not in ['Commune', 'Nom commune']:
                        detected['commune'] = str(commune).strip()
                        break

            # 2. D√©tecter le collaborateur depuis la colonne U (index 20) - Page 3
            if len(df.columns) >= 21:
                collab_column = df.iloc[:, 20]  # Colonne U
                # Chercher le premier collaborateur non vide
                for collab in collab_column:
                    if pd.notna(collab) and str(collab).strip() and str(collab).strip() != 'Collaborateur U':
                        detected['collaborateur'] = str(collab).strip()
                        break

            # 3. D√©tecter l'INSEE depuis la colonne C (index 2) - Page 3
            if len(df.columns) >= 3:
                insee_column = df.iloc[:, 2]  # Colonne C
                # Chercher le premier code INSEE valide (5 chiffres)
                for insee in insee_column:
                    if pd.notna(insee):
                        insee_str = str(insee).strip()
                        # V√©rifier si c'est un code INSEE (5 chiffres)
                        if insee_str.isdigit() and len(insee_str) == 5:
                            detected['insee'] = insee_str
                            break

            # 4. D√©tecter l'ID T√¢che depuis la colonne B (index 1) - Page 3
            if len(df.columns) >= 2:
                id_tache_column = df.iloc[:, 1]  # Colonne B
                # Chercher le premier ID t√¢che valide
                for id_tache in id_tache_column:
                    if pd.notna(id_tache):
                        id_tache_str = str(id_tache).strip()
                        # V√©rifier si c'est un ID t√¢che valide (num√©rique, pas l'en-t√™te)
                        if id_tache_str.isdigit() and len(id_tache_str) >= 3 and id_tache_str != 'ID Tache':
                            detected['id_tache'] = id_tache_str
                            break

            # 5. D√©tecter le domaine depuis la colonne D (index 3) - Page 3
            if len(df.columns) >= 4 and len(df) > 0:
                # Essayer ligne 1 d'abord (index 0)
                if pd.notna(df.iloc[0, 3]):
                    domaine_val = str(df.iloc[0, 3]).strip()
                    if domaine_val not in ['Domaine', 'Domain', 'nan', ''] and len(domaine_val) > 1:
                        detected['domaine'] = domaine_val
                        self.logger.info(f"Domaine d√©tect√© ligne 1: {domaine_val}")

                # Si pas trouv√©, essayer ligne 2 (index 1)
                if 'domaine' not in detected and len(df) > 1:
                    if pd.notna(df.iloc[1, 3]):
                        domaine_val = str(df.iloc[1, 3]).strip()
                        if domaine_val not in ['Domaine', 'Domain', 'nan', ''] and len(domaine_val) > 1:
                            detected['domaine'] = domaine_val
                            self.logger.info(f"Domaine d√©tect√© ligne 2: {domaine_val}")

                # Si pas trouv√©, essayer ligne 3 (index 2)
                if 'domaine' not in detected and len(df) > 2:
                    if pd.notna(df.iloc[2, 3]):
                        domaine_val = str(df.iloc[2, 3]).strip()
                        if domaine_val not in ['Domaine', 'Domain', 'nan', ''] and len(domaine_val) > 1:
                            detected['domaine'] = domaine_val
                            self.logger.info(f"Domaine d√©tect√© ligne 3: {domaine_val}")

                # Si pas trouv√©, chercher dans toutes les lignes
                if 'domaine' not in detected:
                    domaine_column = df.iloc[:, 3]  # Colonne D
                    for i, domaine in enumerate(domaine_column):
                        if pd.notna(domaine) and str(domaine).strip():
                            domaine_val = str(domaine).strip()
                            if domaine_val not in ['Domaine', 'Domain', 'nan', ''] and len(domaine_val) > 1:
                                detected['domaine'] = domaine_val
                                self.logger.info(f"Domaine d√©tect√© ligne {i+1}: {domaine_val}")
                                break

            # 6. D√©tecter Nbr voies CMS Total depuis la colonne G (index 6) - Page 3
            if len(df.columns) >= 7 and len(df) > 0:
                # Essayer ligne 1 d'abord (index 0)
                if pd.notna(df.iloc[0, 6]):
                    cms_str = str(df.iloc[0, 6]).strip()
                    try:
                        cms_num = float(cms_str)
                        if cms_num >= 0 and cms_str not in ['CMS', 'Total', 'Nbr', '0.0']:
                            # Correction pour les erreurs de pr√©cision flottante
                            if abs(cms_num - round(cms_num)) < 1e-10:
                                detected['cms_total'] = str(int(round(cms_num)))
                            else:
                                detected['cms_total'] = cms_str
                            self.logger.info(f"CMS Total d√©tect√© ligne 1: {detected['cms_total']}")
                    except ValueError:
                        pass

                # Si pas trouv√©, essayer ligne 2 (index 1)
                if 'cms_total' not in detected and len(df) > 1:
                    if pd.notna(df.iloc[1, 6]):
                        cms_str = str(df.iloc[1, 6]).strip()
                        try:
                            cms_num = float(cms_str)
                            if cms_num >= 0 and cms_str not in ['CMS', 'Total', 'Nbr', '0.0']:
                                # Correction pour les erreurs de pr√©cision flottante
                                if abs(cms_num - round(cms_num)) < 1e-10:
                                    detected['cms_total'] = str(int(round(cms_num)))
                                else:
                                    detected['cms_total'] = cms_str
                                self.logger.info(f"CMS Total d√©tect√© ligne 2: {detected['cms_total']}")
                        except ValueError:
                            pass

                # Si pas trouv√©, essayer ligne 3 (index 2)
                if 'cms_total' not in detected and len(df) > 2:
                    if pd.notna(df.iloc[2, 6]):
                        cms_str = str(df.iloc[2, 6]).strip()
                        try:
                            cms_num = float(cms_str)
                            if cms_num >= 0 and cms_str not in ['CMS', 'Total', 'Nbr', '0.0']:
                                # Correction pour les erreurs de pr√©cision flottante
                                if abs(cms_num - round(cms_num)) < 1e-10:
                                    detected['cms_total'] = str(int(round(cms_num)))
                                else:
                                    detected['cms_total'] = cms_str
                                self.logger.info(f"CMS Total d√©tect√© ligne 3: {detected['cms_total']}")
                        except ValueError:
                            pass

                # Si pas trouv√©, chercher dans toutes les lignes
                if 'cms_total' not in detected:
                    cms_column = df.iloc[:, 6]  # Colonne G
                    for i, cms in enumerate(cms_column):
                        if pd.notna(cms):
                            cms_str = str(cms).strip()
                            try:
                                cms_num = float(cms_str)
                                if cms_num >= 0 and cms_str not in ['CMS', 'Total', 'Nbr', '0.0']:
                                    # Correction pour les erreurs de pr√©cision flottante
                                    if abs(cms_num - round(cms_num)) < 1e-10:
                                        detected['cms_total'] = str(int(round(cms_num)))
                                    else:
                                        detected['cms_total'] = cms_str
                                    self.logger.info(f"CMS Total d√©tect√© ligne {i+1}: {detected['cms_total']}")
                                    break
                            except ValueError:
                                continue

            # 7. D√©tecter Nbr IMB PA Total depuis la colonne H (index 7) - Page 3
            if len(df.columns) >= 8 and len(df) > 0:
                # Essayer ligne 1 d'abord (index 0)
                if pd.notna(df.iloc[0, 7]):
                    pa_str = str(df.iloc[0, 7]).strip()
                    try:
                        pa_num = float(pa_str)
                        if pa_num >= 0 and pa_str not in ['PA', 'Total', 'Nbr', '0.0']:
                            # Correction pour les erreurs de pr√©cision flottante
                            # Arrondir √† l'entier le plus proche si tr√®s proche d'un entier
                            if abs(pa_num - round(pa_num)) < 1e-10:
                                detected['pa_total'] = str(int(round(pa_num)))
                            else:
                                detected['pa_total'] = pa_str
                            self.logger.info(f"PA Total d√©tect√© ligne 1: {detected['pa_total']}")
                    except ValueError:
                        pass

                # Si pas trouv√©, essayer ligne 2 (index 1)
                if 'pa_total' not in detected and len(df) > 1:
                    if pd.notna(df.iloc[1, 7]):
                        pa_str = str(df.iloc[1, 7]).strip()
                        try:
                            pa_num = float(pa_str)
                            if pa_num >= 0 and pa_str not in ['PA', 'Total', 'Nbr', '0.0']:
                                # Correction pour les erreurs de pr√©cision flottante
                                # Arrondir √† l'entier le plus proche si tr√®s proche d'un entier
                                if abs(pa_num - round(pa_num)) < 1e-10:
                                    detected['pa_total'] = str(int(round(pa_num)))
                                else:
                                    detected['pa_total'] = pa_str
                                self.logger.info(f"PA Total d√©tect√© ligne 2: {detected['pa_total']}")
                        except ValueError:
                            pass

                # Si pas trouv√©, essayer ligne 3 (index 2)
                if 'pa_total' not in detected and len(df) > 2:
                    if pd.notna(df.iloc[2, 7]):
                        pa_str = str(df.iloc[2, 7]).strip()
                        try:
                            pa_num = float(pa_str)
                            if pa_num >= 0 and pa_str not in ['PA', 'Total', 'Nbr', '0.0']:
                                # Correction pour les erreurs de pr√©cision flottante
                                # Arrondir √† l'entier le plus proche si tr√®s proche d'un entier
                                if abs(pa_num - round(pa_num)) < 1e-10:
                                    detected['pa_total'] = str(int(round(pa_num)))
                                else:
                                    detected['pa_total'] = pa_str
                                self.logger.info(f"PA Total d√©tect√© ligne 3: {detected['pa_total']}")
                        except ValueError:
                            pass

                # Si pas trouv√©, chercher dans toutes les lignes
                if 'pa_total' not in detected:
                    pa_column = df.iloc[:, 7]  # Colonne H
                    for i, pa in enumerate(pa_column):
                        if pd.notna(pa):
                            pa_str = str(pa).strip()
                            try:
                                pa_num = float(pa_str)
                                if pa_num >= 0 and pa_str not in ['PA', 'Total', 'Nbr', '0.0']:
                                    # Correction pour les erreurs de pr√©cision flottante
                                    # Arrondir √† l'entier le plus proche si tr√®s proche d'un entier
                                    if abs(pa_num - round(pa_num)) < 1e-10:
                                        detected['pa_total'] = str(int(round(pa_num)))
                                    else:
                                        detected['pa_total'] = pa_str
                                    self.logger.info(f"PA Total d√©tect√© ligne {i+1}: {detected['pa_total']}")
                                    break
                            except ValueError:
                                continue

            # 8. D√©tecter le collaborateur depuis la colonne U (index 20) - Page 3
            if len(df.columns) >= 21 and len(df) > 0:
                # Essayer ligne 1 d'abord (index 0)
                if pd.notna(df.iloc[0, 20]):
                    collab_val = str(df.iloc[0, 20]).strip()
                    if collab_val not in ['Collaborateur', 'Affectation', 'nan', ''] and len(collab_val) > 1:
                        detected['collaborateur'] = collab_val
                        self.logger.info(f"Collaborateur d√©tect√© ligne 1: {collab_val}")

                # Si pas trouv√©, essayer ligne 2 (index 1)
                if 'collaborateur' not in detected and len(df) > 1:
                    if pd.notna(df.iloc[1, 20]):
                        collab_val = str(df.iloc[1, 20]).strip()
                        if collab_val not in ['Collaborateur', 'Affectation', 'nan', ''] and len(collab_val) > 1:
                            detected['collaborateur'] = collab_val
                            self.logger.info(f"Collaborateur d√©tect√© ligne 2: {collab_val}")

                # Si pas trouv√©, essayer ligne 3 (index 2)
                if 'collaborateur' not in detected and len(df) > 2:
                    if pd.notna(df.iloc[2, 20]):
                        collab_val = str(df.iloc[2, 20]).strip()
                        if collab_val not in ['Collaborateur', 'Affectation', 'nan', ''] and len(collab_val) > 1:
                            detected['collaborateur'] = collab_val
                            self.logger.info(f"Collaborateur d√©tect√© ligne 3: {collab_val}")

                # Si pas trouv√©, chercher dans toutes les lignes
                if 'collaborateur' not in detected:
                    collab_column = df.iloc[:, 20]  # Colonne U
                    for i, collab in enumerate(collab_column):
                        if pd.notna(collab) and str(collab).strip():
                            collab_val = str(collab).strip()
                            if collab_val not in ['Collaborateur', 'Affectation', 'nan', ''] and len(collab_val) > 1:
                                detected['collaborateur'] = collab_val
                                self.logger.info(f"Collaborateur d√©tect√© ligne {i+1}: {collab_val}")
                                break

            # 9. Valeurs par d√©faut si non d√©tect√©es
            if 'commune' not in detected:
                detected['commune'] = 'Non d√©tect√©'
            if 'collaborateur' not in detected:
                detected['collaborateur'] = 'Non d√©tect√©'
            if 'insee' not in detected:
                detected['insee'] = 'Non d√©tect√©'
            if 'id_tache' not in detected:
                detected['id_tache'] = 'Non d√©tect√©'
            if 'domaine' not in detected:
                detected['domaine'] = ''
            if 'cms_total' not in detected:
                detected['cms_total'] = ''
            if 'pa_total' not in detected:
                detected['pa_total'] = ''

            # Log des informations d√©tect√©es pour v√©rification
            self.logger.info("=== INFORMATIONS D√âTECT√âES ===")
            self.logger.info(f"Nom de commune (Col A): {detected.get('commune', 'N/A')}")
            self.logger.info(f"ID t√¢che (Col B): {detected.get('id_tache', 'N/A')}")
            self.logger.info(f"Code INSEE (Col C): {detected.get('insee', 'N/A')}")
            self.logger.info(f"Domaine (Col D): {detected.get('domaine', 'N/A')}")
            self.logger.info(f"Collaborateur (Col U): {detected.get('collaborateur', 'N/A')}")
            self.logger.info(f"CMS Total (Col G): {detected.get('cms_total', 'N/A')}")
            self.logger.info(f"PA Total (Col H): {detected.get('pa_total', 'N/A')}")
            self.logger.info("==============================")



            # Log d√©taill√© des colonnes pour debug si des valeurs sont manquantes
            if not detected.get('domaine') or not detected.get('cms_total') or not detected.get('pa_total'):
                self.logger.info("=== DEBUG COLONNES MANQUANTES ===")
                if len(df.columns) >= 4:
                    self.logger.info(f"Colonne D (Domaine) - premi√®res valeurs: {df.iloc[:5, 3].tolist()}")
                if len(df.columns) >= 7:
                    self.logger.info(f"Colonne G (CMS) - premi√®res valeurs: {df.iloc[:5, 6].tolist()}")
                if len(df.columns) >= 8:
                    self.logger.info(f"Colonne H (PA) - premi√®res valeurs: {df.iloc[:5, 7].tolist()}")
                self.logger.info("===================================")

            # Log d√©taill√© sp√©cifique pour ligne 2 (index 1)
            self.logger.info("=== DEBUG LIGNE 2 (INDEX 1) ===")
            if len(df) > 1:
                if len(df.columns) >= 4:
                    self.logger.info(f"Ligne 2, Colonne D (Domaine): '{df.iloc[1, 3]}'")
                if len(df.columns) >= 7:
                    self.logger.info(f"Ligne 2, Colonne G (CMS): '{df.iloc[1, 6]}'")
                if len(df.columns) >= 8:
                    self.logger.info(f"Ligne 2, Colonne H (PA): '{df.iloc[1, 7]}'")
            self.logger.info("===============================")

            return detected

        except Exception as e:
            self.logger.error(f"Erreur d√©tection informations: {e}")
            return {
                'commune': 'Erreur d√©tection',
                'collaborateur': 'Erreur d√©tection',
                'insee': 'Erreur d√©tection',
                'id_tache': 'Erreur d√©tection'
            }
    
    def _check_analysis_ready(self):
        """V√©rifie si tous les √©l√©ments sont pr√™ts pour lancer l'analyse."""
        ready = (
            self.qgis_data is not None and
            self.suivi_data is not None and
            self.detected_info.get('collaborateur', '') != 'Non d√©tect√©' and
            self.detected_info.get('commune', '') != 'Non d√©tect√©'
        )

        if ready:
            self.analyze_button.config(state='normal')
            self._update_status("success", "Pr√™t pour l'analyse qualit√©")
        else:
            self.analyze_button.config(state='disabled')

        return ready
    
    def _run_quality_analysis(self):
        """Lance l'analyse de contr√¥le qualit√©."""
        if not self._check_analysis_ready():
            messagebox.showwarning("Attention", "Veuillez charger tous les fichiers requis avant de lancer l'analyse.")
            return

        try:
            self._update_status("waiting", "Analyse en cours...")
            self.progress_var.set(10)

            def run_analysis():
                results = {
                    'critere_0': self._analyze_critere_0(),
                    'critere_2': self._analyze_critere_2(),
                    'critere_3': self._analyze_critere_3(),
                    'critere_4': self._analyze_critere_4(),
                    'critere_5': self._analyze_critere_5(),
                    'summary': {}
                }

                # Calculer le r√©sum√©
                results['summary'] = self._calculate_summary(results)

                return results

            def on_success(results):
                self.qc_results = results
                self._display_compact_results(results)
                self.export_button.config(state='normal')
                self._update_status("success", "Analyse termin√©e avec succ√®s")

                # Mettre √† jour les indicateurs de statut
                if hasattr(self, 'analysis_status'):
                    self.analysis_status.config(text="üîç Analyse: ‚úÖ Termin√©e", fg=COLORS['SUCCESS'])
                if hasattr(self, 'report_status'):
                    self.report_status.config(text="üìä Rapport: ‚ö†Ô∏è Pr√™t", fg=COLORS['WARNING'])

                self.progress_var.set(100)
                self.logger.info("Analyse qualit√© termin√©e")

            def on_error(error):
                self._update_status("error", "Erreur lors de l'analyse")
                if hasattr(self, 'analysis_status'):
                    self.analysis_status.config(text="üîç Analyse: ‚ùå Erreur", fg=COLORS['ERROR'])
                self.progress_var.set(0)
                messagebox.showerror("Erreur", f"Erreur lors de l'analyse:\n{error}")
                self.logger.error(f"Erreur analyse qualit√©: {error}")

            # Lancer l'analyse de mani√®re asynchrone
            run_async_task(run_analysis, on_success, on_error, "Analyse qualit√©")

        except Exception as e:
            self.logger.error(f"Erreur lors du lancement de l'analyse: {e}")
            messagebox.showerror("Erreur", f"Erreur lors du lancement:\n{e}")

    def _analyze_critere_0(self) -> Dict[str, Any]:
        """
        Crit√®re 0: Incoh√©rence entre fichier R√©sultats QGis et suivi commune.
        Compare le nombre des motifs sp√©cifi√©s dans les deux fichiers.
        Motifs √† v√©rifier: AD RAS, OK, NOK, UPR RAS, UPR OK, UPR NOK, Hors Commune
        """
        try:
            pd = get_pandas()

            # Motifs sp√©cifiques √† analyser pour l'√©cart Plan Adressage
            motifs_plan_adressage = [
                'AD RAS', 'OK', 'NOK', 'UPR RAS', 'UPR OK', 'UPR NOK', 'HORS COMMUNE'
            ]

            # Extraire les motifs du fichier QGis (colonne J - index 9)
            qgis_motifs = []
            if len(self.qgis_data.columns) > 9:
                qgis_motifs_column = self.qgis_data.iloc[:, 9]  # Colonne J (import fantome)
                qgis_motifs = [str(motif).strip().upper() for motif in qgis_motifs_column if pd.notna(motif) and str(motif).strip()]

            # Extraire les motifs du fichier suivi commune (colonne I - index 8) depuis la PAGE 2
            suivi_motifs = []
            try:
                # Lire sp√©cifiquement la page 2 (index 1) pour les motifs
                pd = get_pandas()
                if hasattr(self, 'current_suivi_file_path') and self.current_suivi_file_path:
                    suivi_page2_df = pd.read_excel(self.current_suivi_file_path, sheet_name=1, date_format=None)  # Page 2
                    if len(suivi_page2_df.columns) > 8:
                        suivi_motifs_column = suivi_page2_df.iloc[:, 8]  # Colonne I (Motif)
                        suivi_motifs = [str(motif).strip().upper() for motif in suivi_motifs_column if pd.notna(motif) and str(motif).strip()]
                        self.logger.info(f"Motifs extraits de la page 2, colonne I: {len(suivi_motifs)} motifs trouv√©s")
                else:
                    self.logger.warning("Chemin du fichier suivi non disponible, impossible de lire la page 2")
            except Exception as e:
                self.logger.error(f"Erreur lors de la lecture de la page 2 pour les motifs: {e}")
                # Fallback: essayer avec les donn√©es actuelles (page 3)
                if len(self.suivi_data.columns) > 8:
                    suivi_motifs_column = self.suivi_data.iloc[:, 8]  # Colonne I (Motif)
                    suivi_motifs = [str(motif).strip().upper() for motif in suivi_motifs_column if pd.notna(motif) and str(motif).strip()]

            # Compter les occurrences de chaque motif sp√©cifique
            qgis_counts = {}
            suivi_counts = {}

            # Initialiser tous les motifs √† 0
            for motif in motifs_plan_adressage:
                qgis_counts[motif] = 0
                suivi_counts[motif] = 0

            # Compter les motifs QGis
            for motif in qgis_motifs:
                if motif in motifs_plan_adressage:
                    qgis_counts[motif] += 1

            # Compter les motifs Suivi
            for motif in suivi_motifs:
                if motif in motifs_plan_adressage:
                    suivi_counts[motif] += 1

            # D√©tecter les incoh√©rences pour les motifs Plan Adressage
            incoherences = []
            ecart_plan_adressage = {}

            for motif in motifs_plan_adressage:
                qgis_count = qgis_counts[motif]
                suivi_count = suivi_counts[motif]
                difference = qgis_count - suivi_count

                # Stocker les donn√©es pour l'√©cart Plan Adressage
                ecart_plan_adressage[motif] = {
                    'suivi_count': suivi_count,
                    'qgis_count': qgis_count,
                    'difference': difference,
                    'has_ecart': difference != 0
                }

                # Ajouter aux incoh√©rences si diff√©rence d√©tect√©e
                if difference != 0:
                    incoherences.append({
                        'motif': motif,
                        'qgis_count': qgis_count,
                        'suivi_count': suivi_count,
                        'difference': difference,
                        'type': 'ECART_PLAN_ADRESSAGE',
                        'description': f"√âcart d√©tect√©: {suivi_count} (Suivi) vs {qgis_count} (QGis) = {difference:+d}"
                    })

            # Calculer les totaux
            total_qgis = sum(qgis_counts.values())
            total_suivi = sum(suivi_counts.values())

            return {
                'status': 'COMPLETE',
                'total_incoherences': len(incoherences),
                'incoherences': incoherences,
                'ecart_plan_adressage': ecart_plan_adressage,
                'qgis_motifs_total': total_qgis,
                'suivi_motifs_total': total_suivi,
                'qgis_counts': qgis_counts,
                'suivi_counts': suivi_counts,
                'motifs_analyses': motifs_plan_adressage
            }

        except Exception as e:
            self.logger.error(f"Erreur dans l'analyse du crit√®re 0: {e}")
            return {
                'status': 'ERROR',
                'error': str(e),
                'total_incoherences': 0,
                'incoherences': [],
                'ecart_plan_adressage': {}
            }
    


    def _analyze_critere_2(self) -> Dict[str, Any]:
        """
        Crit√®re 2: Oubli Ticket UPR et 501/511
        V√©rifie si les collaborateurs ont d√©pos√© les tickets requis selon les motifs utilis√©s.

        R√®gles:
        1. UPR OK (page 2, col I) -> doit avoir ticket UPR (page 3, col T)
        2. Cr√©ation/Modification Voie (page 1, col E) OU OK (page 2, col I) -> doit avoir ticket 501/511 (page 3, col Q)
        """
        try:
            pd = get_pandas()

            # Initialiser les r√©sultats
            ticket_upr_status = "N/A"
            ticket_501_511_status = "N/A"
            errors = []

            # Variables pour stocker les donn√©es des diff√©rentes pages
            page1_data = None
            page2_data = None
            page3_data = self.suivi_data  # Page 3 d√©j√† charg√©e

            # Lire les pages 1 et 2 du fichier suivi commune
            if hasattr(self, 'current_suivi_file_path') and self.current_suivi_file_path:
                try:
                    # Page 1 pour v√©rifier colonne E (Motif Voie)
                    page1_data = pd.read_excel(self.current_suivi_file_path, sheet_name=0, date_format=None)
                    # Page 2 pour v√©rifier colonne I (Motif) - d√©j√† utilis√©e dans crit√®re 0
                    page2_data = pd.read_excel(self.current_suivi_file_path, sheet_name=1, date_format=None)

                    self.logger.info("Pages 1, 2 et 3 du fichier suivi charg√©es pour analyse crit√®re 2")

                except Exception as e:
                    self.logger.error(f"Erreur lecture pages suivi pour crit√®re 2: {e}")
                    return {
                        'status': 'ERROR',
                        'error': f'Impossible de lire les pages du fichier suivi: {e}',
                        'ticket_upr_status': 'ERROR',
                        'ticket_501_511_status': 'ERROR',
                        'errors': []
                    }
            else:
                return {
                    'status': 'ERROR',
                    'error': 'Chemin du fichier suivi non disponible',
                    'ticket_upr_status': 'ERROR',
                    'ticket_501_511_status': 'ERROR',
                    'errors': []
                }

            # V√âRIFICATION 1: Ticket UPR
            # Si UPR OK dans page 2, colonne I -> doit avoir ID dans page 3, colonne T
            upr_ok_found = False
            if page2_data is not None and len(page2_data.columns) > 8:
                motifs_page2 = page2_data.iloc[:, 8]  # Colonne I
                for motif in motifs_page2:
                    if pd.notna(motif) and str(motif).strip().upper() == 'UPR OK':
                        upr_ok_found = True
                        break

            if upr_ok_found:
                # V√©rifier si ticket UPR d√©pos√© (page 3, colonne T - index 19)
                ticket_upr_deposited = False
                if len(page3_data.columns) > 19:
                    id_upr_column = page3_data.iloc[:, 19]  # Colonne T
                    for id_upr in id_upr_column:
                        if pd.notna(id_upr) and str(id_upr).strip() and str(id_upr).strip() not in ['', 'nan', 'ID UPR', 'Ticket UPR']:
                            ticket_upr_deposited = True
                            break

                ticket_upr_status = "OK" if ticket_upr_deposited else "NOK"
                if not ticket_upr_deposited:
                    errors.append({
                        'type': 'TICKET_UPR_MANQUANT',
                        'description': 'Motif UPR OK d√©tect√© mais aucun ticket UPR d√©pos√© (colonne T vide)',
                        'page': 'Page 2 -> Page 3',
                        'colonnes': 'I -> T'
                    })
            else:
                ticket_upr_status = "N/A"  # Pas de UPR OK, donc pas de ticket requis

            # V√âRIFICATION 2: Ticket 501/511
            # Si Cr√©ation/Modification Voie (page 1, col E) OU OK (page 2, col I) -> doit avoir ID dans page 3, col Q
            ticket_501_511_required = False

            # V√©rifier page 1, colonne E (Motif Voie)
            if page1_data is not None and len(page1_data.columns) > 4:
                motifs_voie = page1_data.iloc[:, 4]  # Colonne E
                for motif in motifs_voie:
                    if pd.notna(motif):
                        motif_str = str(motif).strip()
                        if motif_str in ['Cr√©ation Voie', 'Modification Voie']:
                            ticket_501_511_required = True
                            break

            # V√©rifier page 2, colonne I (motif OK)
            if not ticket_501_511_required and page2_data is not None and len(page2_data.columns) > 8:
                motifs_page2 = page2_data.iloc[:, 8]  # Colonne I
                for motif in motifs_page2:
                    if pd.notna(motif) and str(motif).strip().upper() == 'OK':
                        ticket_501_511_required = True
                        break

            if ticket_501_511_required:
                # V√©rifier si ticket 501/511 d√©pos√© (page 3, colonne Q - index 16)
                ticket_501_511_deposited = False
                if len(page3_data.columns) > 16:
                    id_501_511_column = page3_data.iloc[:, 16]  # Colonne Q
                    for id_ticket in id_501_511_column:
                        if pd.notna(id_ticket) and str(id_ticket).strip() and str(id_ticket).strip() not in ['', 'nan', 'ID 501/511', 'Ticket 501/511']:
                            ticket_501_511_deposited = True
                            break

                ticket_501_511_status = "OK" if ticket_501_511_deposited else "NOK"
                if not ticket_501_511_deposited:
                    errors.append({
                        'type': 'TICKET_501_511_MANQUANT',
                        'description': 'Motif Cr√©ation/Modification Voie ou OK d√©tect√© mais aucun ticket 501/511 d√©pos√© (colonne Q vide)',
                        'page': 'Page 1/2 -> Page 3',
                        'colonnes': 'E/I -> Q'
                    })
            else:
                ticket_501_511_status = "N/A"  # Pas de motif requis, donc pas de ticket n√©cessaire

            return {
                'status': 'COMPLETE',
                'ticket_upr_status': ticket_upr_status,
                'ticket_501_511_status': ticket_501_511_status,
                'total_errors': len(errors),
                'errors': errors,
                'upr_ok_found': upr_ok_found,
                'ticket_501_511_required': ticket_501_511_required
            }

        except Exception as e:
            self.logger.error(f"Erreur dans l'analyse du crit√®re 2: {e}")
            return {
                'status': 'ERROR',
                'error': str(e),
                'ticket_upr_status': 'ERROR',
                'ticket_501_511_status': 'ERROR',
                'total_errors': 0,
                'errors': []
            }

    def _analyze_critere_3(self) -> Dict[str, Any]:
        """
        Crit√®re 3: Contr√¥le IMB Doublons
        D√©tecte les doublons suspects dans le fichier R√©sultats QGis en identifiant
        les codes IMB identiques ayant le m√™me motif de traitement avec des adresses BAN diff√©rentes.

        Colonnes analys√©es:
        - A: Num Dossier Site (codes IMB)
        - B: Numero Voie Site
        - C: Repondant Voie Site
        - D: Libelle Voie Site
        - J: Import Fantome (motifs)
        - U: Adresse BAN
        """
        try:
            pd = get_pandas()

            # V√©rifier que les colonnes requises existent
            required_columns = ['A', 'B', 'C', 'D', 'J', 'U']  # Colonnes A, B, C, D, J, U
            if len(self.qgis_data.columns) < 21:  # Au moins 21 colonnes (A-U)
                raise ValueError("Le fichier QGis ne contient pas assez de colonnes (minimum A-U requis)")

            # Extraire les donn√©es des colonnes requises
            df = self.qgis_data.copy()

            # Renommer les colonnes pour faciliter le travail
            df_work = pd.DataFrame({
                'imb_code': df.iloc[:, 0],  # Colonne A - Num Dossier Site
                'numero_voie': df.iloc[:, 1],  # Colonne B - Numero Voie Site
                'repondant_voie': df.iloc[:, 2],  # Colonne C - Repondant Voie Site
                'libelle_voie': df.iloc[:, 3],  # Colonne D - Libelle Voie Site
                'motif': df.iloc[:, 9],  # Colonne J - Import Fantome
                'adresse_ban': df.iloc[:, 20]  # Colonne U - Adresse BAN
            })

            # Nettoyer les donn√©es
            df_work = df_work.dropna(subset=['imb_code'])  # Supprimer les lignes sans code IMB
            df_work['imb_code'] = df_work['imb_code'].astype(str).str.strip()
            df_work['motif'] = df_work['motif'].astype(str).str.strip().str.upper()
            df_work['adresse_ban'] = df_work['adresse_ban'].astype(str).str.strip()

            # Construire l'adresse optimum (B + C + D) en g√©rant les valeurs vides
            def construct_adresse_optimum(row):
                """Construit l'adresse optimum en g√©rant les valeurs vides et num√©riques."""
                # Nettoyer et convertir les valeurs
                numero = str(row['numero_voie']).strip() if pd.notna(row['numero_voie']) else ''
                repondant = str(row['repondant_voie']).strip() if pd.notna(row['repondant_voie']) else ''
                libelle = str(row['libelle_voie']).strip() if pd.notna(row['libelle_voie']) else ''

                # Nettoyer les valeurs num√©riques (enlever .0)
                if numero and numero != 'nan':
                    try:
                        # Si c'est un nombre entier, enlever les d√©cimales
                        if '.' in numero and numero.replace('.', '').replace('-', '').isdigit():
                            numero = str(int(float(numero)))
                    except:
                        pass

                # Construire l'adresse selon les r√®gles :
                # - Si C est vide : B + D uniquement
                # - Si B ou C est vide : D uniquement
                # - Sinon : B + C + D

                parts = []

                if numero and numero != 'nan':
                    parts.append(numero)

                if repondant and repondant != 'nan':
                    parts.append(repondant)

                if libelle and libelle != 'nan':
                    parts.append(libelle)

                # Appliquer les r√®gles sp√©cifiques
                if not repondant or repondant == 'nan':
                    # Si C est vide : B + D uniquement (ou D si B est vide)
                    if numero and numero != 'nan' and libelle and libelle != 'nan':
                        return f"{numero} {libelle}".strip()
                    elif libelle and libelle != 'nan':
                        return libelle.strip()
                    elif numero and numero != 'nan':
                        return numero.strip()
                    else:
                        return ''
                else:
                    # Cas normal : B + C + D
                    return ' '.join(parts).strip()

            df_work['adresse_optimum'] = df_work.apply(construct_adresse_optimum, axis=1)

            # Identifier les doublons IMB
            imb_counts = df_work['imb_code'].value_counts()
            doublons_imb = imb_counts[imb_counts > 1].index.tolist()

            doublons_suspects = []
            doublons_details = []
            erreurs_motif_ok = []
            ad_a_analyser = []
            lignes_deja_ajoutees = set()  # Pour √©viter les doublons

            # √âTAPE 1: D√©tecter les erreurs de motif "OK" avec adresses identiques (tous les IMB)
            for index, row in df_work.iterrows():
                motif = str(row['motif']).strip().upper()
                adresse_optimum = str(row['adresse_optimum']).strip()
                adresse_ban = str(row['adresse_ban']).strip()

                # Debug: Log pour v√©rifier les comparaisons
                self.logger.debug(f"V√©rification motif OK - IMB: {row['imb_code']}, Motif: '{motif}', Adresse Opt: '{adresse_optimum}', Adresse BAN: '{adresse_ban}'")

                # V√©rifier si motif = "OK" et adresses identiques
                if (motif == 'OK' and
                    adresse_optimum and adresse_optimum != '' and adresse_optimum != 'nan' and
                    adresse_ban and adresse_ban != '' and adresse_ban != 'nan' and
                    adresse_optimum == adresse_ban):

                    # Cr√©er une cl√© unique pour cette ligne
                    ligne_key = f"{row['imb_code']}_{adresse_optimum}_{adresse_ban}_{motif}"

                    if ligne_key not in lignes_deja_ajoutees:
                        erreur_info = {
                            'imb_code': row['imb_code'],
                            'adresse_optimum': adresse_optimum,
                            'motif_initial': motif,
                            'adresse_ban': adresse_ban,
                            'type': 'ERREUR_MOTIF_OK_ADRESSE_IDENTIQUE',
                            'description': f"IMB {row['imb_code']} - Motif 'OK' mais adresse optimum = adresse BAN (erreur de saisie)"
                        }
                        erreurs_motif_ok.append(erreur_info)
                        doublons_details.append(erreur_info)
                        lignes_deja_ajoutees.add(ligne_key)

                        # Log pour confirmer la d√©tection
                        self.logger.info(f"ERREUR MOTIF OK D√âTECT√âE - IMB: {row['imb_code']}, Adresse: '{adresse_optimum}'")

            # √âTAPE 2: Analyser chaque groupe de doublons IMB
            for imb_code in doublons_imb:
                groupe_doublons = df_work[df_work['imb_code'] == imb_code].copy()

                # V√©rifier s'il y a des motifs identiques avec des adresses BAN diff√©rentes
                for motif in groupe_doublons['motif'].unique():
                    if pd.isna(motif) or motif == '' or motif.upper() == 'NAN':
                        continue

                    lignes_meme_motif = groupe_doublons[groupe_doublons['motif'] == motif]

                    if len(lignes_meme_motif) > 1:
                        # V√©rifier si les adresses BAN sont diff√©rentes
                        adresses_ban_uniques = lignes_meme_motif['adresse_ban'].unique()
                        adresses_ban_uniques = [addr for addr in adresses_ban_uniques
                                              if pd.notna(addr) and str(addr).strip() != '' and str(addr).upper() != 'NAN']

                        if len(adresses_ban_uniques) > 1:
                            # Doublon suspect d√©tect√© !
                            for _, ligne in lignes_meme_motif.iterrows():
                                # Cr√©er une cl√© unique pour cette ligne
                                ligne_key = f"{ligne['imb_code']}_{ligne['adresse_optimum']}_{ligne['adresse_ban']}_{ligne['motif']}"

                                # Ajouter seulement si pas d√©j√† ajout√©e
                                if ligne_key not in lignes_deja_ajoutees:
                                    doublon_info = {
                                        'imb_code': ligne['imb_code'],
                                        'adresse_optimum': ligne['adresse_optimum'],
                                        'motif_initial': ligne['motif'],
                                        'adresse_ban': ligne['adresse_ban'],
                                        'type': 'DOUBLON_IMB_SUSPECT',
                                        'description': f"IMB {ligne['imb_code']} - Motif '{ligne['motif']}' avec adresses BAN diff√©rentes"
                                    }
                                    doublons_suspects.append(doublon_info)
                                    doublons_details.append(doublon_info)
                                    lignes_deja_ajoutees.add(ligne_key)

            # Calculer les statistiques
            total_doublons_imb = len(doublons_imb)
            total_doublons_suspects = len(doublons_suspects)
            total_erreurs_motif_ok = len(erreurs_motif_ok)
            total_erreurs_detectees = total_doublons_suspects + total_erreurs_motif_ok

            return {
                'status': 'COMPLETE',
                'total_doublons_imb': total_doublons_imb,
                'total_doublons_suspects': total_doublons_suspects,
                'total_erreurs_motif_ok': total_erreurs_motif_ok,
                'total_erreurs_detectees': total_erreurs_detectees,
                'doublons_suspects': doublons_suspects,
                'erreurs_motif_ok': erreurs_motif_ok,
                'doublons_details': doublons_details,
                'doublons_imb_codes': doublons_imb,
                'total_records_analyzed': len(df_work)
            }

        except Exception as e:
            self.logger.error(f"Erreur dans l'analyse du crit√®re 3: {e}")
            return {
                'status': 'ERROR',
                'error': str(e),
                'total_doublons_imb': 0,
                'total_doublons_suspects': 0,
                'total_erreurs_motif_ok': 0,
                'total_erreurs_detectees': 0,
                'doublons_suspects': [],
                'erreurs_motif_ok': [],
                'doublons_details': []
            }

    def _analyze_critere_4(self) -> Dict[str, Any]:
        """
        Crit√®re 4: D√©tection "ad √† analyser"
        D√©tecte les entr√©es avec motif "ad √† analyser" qui ont un IMB pr√©sent dans la colonne A.

        Colonnes analys√©es:
        - A: Num Dossier Site (codes IMB) - OBLIGATOIRE
        - B: Numero Voie Site
        - C: Repondant Voie Site
        - D: Libelle Voie Site
        - J: Import Fantome (motifs)
        - U: Adresse BAN
        """
        try:
            pd = get_pandas()

            # V√©rifier que les colonnes requises existent
            if len(self.qgis_data.columns) < 21:  # Au moins 21 colonnes (A-U)
                raise ValueError("Le fichier QGis ne contient pas assez de colonnes (minimum A-U requis)")

            # Extraire les donn√©es des colonnes requises
            df = self.qgis_data.copy()

            # Renommer les colonnes pour faciliter le travail
            df_work = pd.DataFrame({
                'imb_code': df.iloc[:, 0],  # Colonne A - Num Dossier Site
                'numero_voie': df.iloc[:, 1],  # Colonne B - Numero Voie Site
                'repondant_voie': df.iloc[:, 2],  # Colonne C - Repondant Voie Site
                'libelle_voie': df.iloc[:, 3],  # Colonne D - Libelle Voie Site
                'motif': df.iloc[:, 9],  # Colonne J - Import Fantome
                'adresse_ban': df.iloc[:, 20]  # Colonne U - Adresse BAN
            })

            # Nettoyer les donn√©es
            df_work['imb_code'] = df_work['imb_code'].astype(str).str.strip()
            df_work['motif'] = df_work['motif'].astype(str).str.strip().str.upper()
            df_work['adresse_ban'] = df_work['adresse_ban'].astype(str).str.strip()

            # Construire l'adresse optimum (m√™me logique que crit√®re 3)
            def construct_adresse_optimum(row):
                """Construit l'adresse optimum en g√©rant les valeurs vides et num√©riques."""
                numero = str(row['numero_voie']).strip() if pd.notna(row['numero_voie']) else ''
                repondant = str(row['repondant_voie']).strip() if pd.notna(row['repondant_voie']) else ''
                libelle = str(row['libelle_voie']).strip() if pd.notna(row['libelle_voie']) else ''

                # Nettoyer les valeurs num√©riques (enlever .0)
                if numero and numero != 'nan':
                    try:
                        if '.' in numero and numero.replace('.', '').replace('-', '').isdigit():
                            numero = str(int(float(numero)))
                    except:
                        pass

                # Appliquer les r√®gles de construction d'adresse
                if not repondant or repondant == 'nan':
                    if numero and numero != 'nan' and libelle and libelle != 'nan':
                        return f"{numero} {libelle}".strip()
                    elif libelle and libelle != 'nan':
                        return libelle.strip()
                    elif numero and numero != 'nan':
                        return numero.strip()
                    else:
                        return ''
                else:
                    parts = []
                    if numero and numero != 'nan':
                        parts.append(numero)
                    if repondant and repondant != 'nan':
                        parts.append(repondant)
                    if libelle and libelle != 'nan':
                        parts.append(libelle)
                    return ' '.join(parts).strip()

            df_work['adresse_optimum'] = df_work.apply(construct_adresse_optimum, axis=1)

            # D√©tecter les entr√©es "ad √† analyser" avec IMB pr√©sent
            ad_a_analyser_entries = []

            for _, row in df_work.iterrows():
                motif = str(row['motif']).strip().upper()
                imb_code = str(row['imb_code']).strip()

                # V√©rifier si motif = "AD √Ä ANALYSER" et IMB pr√©sent
                if (motif == 'AD √Ä ANALYSER' and
                    imb_code and imb_code != '' and imb_code != 'nan' and imb_code.upper() != 'NAN'):

                    entry_info = {
                        'imb_code': imb_code,
                        'adresse_optimum': row['adresse_optimum'],
                        'motif_initial': 'ad √† analyser',
                        'adresse_ban': row['adresse_ban'],
                        'type': 'AD_A_ANALYSER_AVEC_IMB',
                        'description': f"IMB {imb_code} - Motif 'ad √† analyser' n√©cessitant une analyse"
                    }
                    ad_a_analyser_entries.append(entry_info)

                    # Log pour confirmer la d√©tection
                    self.logger.info(f"AD √Ä ANALYSER D√âTECT√â - IMB: {imb_code}, Adresse: '{row['adresse_optimum']}'")

            # Calculer les statistiques
            total_ad_a_analyser = len(ad_a_analyser_entries)

            return {
                'status': 'COMPLETE',
                'total_ad_a_analyser': total_ad_a_analyser,
                'ad_a_analyser_entries': ad_a_analyser_entries,
                'total_records_analyzed': len(df_work)
            }

        except Exception as e:
            self.logger.error(f"Erreur dans l'analyse du crit√®re 4: {e}")
            return {
                'status': 'ERROR',
                'error': str(e),
                'total_ad_a_analyser': 0,
                'ad_a_analyser_entries': []
            }

    def _analyze_critere_5(self) -> Dict[str, Any]:
        """
        Crit√®re 5: Motif Incorrect
        D√©tecte les motifs non conformes dans le fichier R√©sultats QGis (colonne J)
        qui ne correspondent pas aux 7 motifs autoris√©s.

        Colonnes analys√©es:
        - A: Num Dossier Site (codes IMB)
        - B: Numero Voie Site
        - C: Repondant Voie Site
        - D: Libelle Voie Site
        - J: Import Fantome (motifs √† v√©rifier)
        - U: Adresse BAN
        """
        try:
            pd = get_pandas()

            # Motifs autoris√©s (liste de r√©f√©rence)
            motifs_autorises = [
                'AD RAS', 'OK', 'NOK', 'UPR RAS', 'UPR OK', 'UPR NOK', 'HORS COMMUNE'
            ]

            # V√©rifier que les colonnes requises existent
            if len(self.qgis_data.columns) < 21:  # Au moins 21 colonnes (A-U)
                raise ValueError("Le fichier QGis ne contient pas assez de colonnes (minimum A-U requis)")

            # Extraire les donn√©es des colonnes requises
            df = self.qgis_data.copy()

            # Renommer les colonnes pour faciliter le travail
            df_work = pd.DataFrame({
                'imb_code': df.iloc[:, 0],  # Colonne A - Num Dossier Site
                'numero_voie': df.iloc[:, 1],  # Colonne B - Numero Voie Site
                'repondant_voie': df.iloc[:, 2],  # Colonne C - Repondant Voie Site
                'libelle_voie': df.iloc[:, 3],  # Colonne D - Libelle Voie Site
                'motif': df.iloc[:, 9],  # Colonne J - Import Fantome (index 9 pour colonne J)
                'adresse_ban': df.iloc[:, 20]  # Colonne U - Adresse BAN
            })

            # Nettoyer les donn√©es
            df_work = df_work.dropna(subset=['imb_code'])  # Supprimer les lignes sans code IMB
            df_work['imb_code'] = df_work['imb_code'].astype(str).str.strip()
            df_work['motif'] = df_work['motif'].astype(str).str.strip().str.upper()
            df_work['adresse_ban'] = df_work['adresse_ban'].astype(str).str.strip()

            # Construire l'adresse optimum (m√™me logique que crit√®re 3)
            def construct_adresse_optimum(row):
                """Construit l'adresse optimum en g√©rant les valeurs vides et num√©riques."""
                numero = str(row['numero_voie']).strip() if pd.notna(row['numero_voie']) else ''
                repondant = str(row['repondant_voie']).strip() if pd.notna(row['repondant_voie']) else ''
                libelle = str(row['libelle_voie']).strip() if pd.notna(row['libelle_voie']) else ''

                # Nettoyer les valeurs num√©riques (enlever .0)
                if numero and numero != 'nan':
                    try:
                        if '.' in numero and numero.replace('.', '').replace('-', '').isdigit():
                            numero = str(int(float(numero)))
                    except:
                        pass

                # Construire l'adresse selon les r√®gles du crit√®re 3
                parts = []
                if numero and numero != 'nan':
                    parts.append(numero)
                if repondant and repondant != 'nan':
                    parts.append(repondant)
                if libelle and libelle != 'nan':
                    parts.append(libelle)

                # Appliquer les r√®gles sp√©cifiques
                if not repondant or repondant == 'nan':
                    if numero and numero != 'nan' and libelle and libelle != 'nan':
                        return f"{numero} {libelle}".strip()
                    elif libelle and libelle != 'nan':
                        return libelle.strip()
                    elif numero and numero != 'nan':
                        return numero.strip()
                    else:
                        return ''
                else:
                    return ' '.join(parts).strip()

            df_work['adresse_optimum'] = df_work.apply(construct_adresse_optimum, axis=1)

            motifs_incorrects_entries = []

            # Analyser chaque ligne pour d√©tecter les motifs incorrects
            for index, row in df_work.iterrows():
                motif = str(row['motif']).strip().upper()
                imb_code = str(row['imb_code']).strip()

                # Ignorer les lignes avec motifs vides ou NaN
                if not motif or motif == '' or motif.upper() == 'NAN':
                    continue

                # V√©rifier si le motif n'est pas dans la liste autoris√©e
                if motif not in motifs_autorises:
                    entry_info = {
                        'imb_code': imb_code,
                        'adresse_optimum': row['adresse_optimum'],
                        'motif_incorrect': motif,
                        'adresse_ban': row['adresse_ban'],
                        'type': 'MOTIF_INCORRECT',
                        'description': f"IMB {imb_code} - Motif '{motif}' non autoris√©"
                    }
                    motifs_incorrects_entries.append(entry_info)

                    # Log pour confirmer la d√©tection
                    self.logger.info(f"MOTIF INCORRECT D√âTECT√â - IMB: {imb_code}, Motif: '{motif}'")

            # Calculer les statistiques
            total_motifs_incorrects = len(motifs_incorrects_entries)

            return {
                'status': 'COMPLETE',
                'total_motifs_incorrects': total_motifs_incorrects,
                'motifs_incorrects_entries': motifs_incorrects_entries,
                'total_records_analyzed': len(df_work)
            }

        except Exception as e:
            self.logger.error(f"Erreur dans l'analyse du crit√®re 5: {e}")
            return {
                'status': 'ERROR',
                'error': str(e),
                'total_motifs_incorrects': 0,
                'motifs_incorrects_entries': []
            }

    def _calculate_summary(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """Calcule le r√©sum√© des r√©sultats d'analyse."""
        try:
            critere_0 = results.get('critere_0', {})
            critere_2 = results.get('critere_2', {})
            critere_3 = results.get('critere_3', {})
            critere_4 = results.get('critere_4', {})
            critere_5 = results.get('critere_5', {})

            total_errors = (
                critere_0.get('total_incoherences', 0) +
                critere_2.get('total_errors', 0) +
                critere_3.get('total_erreurs_detectees', 0) +
                critere_4.get('total_ad_a_analyser', 0) +
                critere_5.get('total_motifs_incorrects', 0)
            )

            return {
                'total_errors': total_errors,
                'critere_0_errors': critere_0.get('total_incoherences', 0),
                'critere_2_errors': critere_2.get('total_errors', 0),
                'critere_3_errors': critere_3.get('total_erreurs_detectees', 0),
                'critere_3_doublons_suspects': critere_3.get('total_doublons_suspects', 0),
                'critere_3_erreurs_motif_ok': critere_3.get('total_erreurs_motif_ok', 0),
                'critere_4_errors': critere_4.get('total_ad_a_analyser', 0),
                'critere_5_errors': critere_5.get('total_motifs_incorrects', 0),
                'ticket_upr_status': critere_2.get('ticket_upr_status', 'N/A'),
                'ticket_501_511_status': critere_2.get('ticket_501_511_status', 'N/A'),
                'total_doublons_imb': critere_3.get('total_doublons_imb', 0),
                'total_doublons_suspects': critere_3.get('total_doublons_suspects', 0),
                'analysis_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'commune': self.detected_info.get('commune', 'Non d√©tect√©'),
                'collaborateur': self.detected_info.get('collaborateur', 'Non d√©tect√©'),
                'insee': self.detected_info.get('insee', 'Non d√©tect√©'),
                'id_tache': self.detected_info.get('id_tache', 'Non d√©tect√©'),
                'domaine': self.detected_info.get('domaine', ''),
                'cms_total': self.detected_info.get('cms_total', ''),
                'pa_total': self.detected_info.get('pa_total', '')
            }

        except Exception as e:
            self.logger.error(f"Erreur calcul r√©sum√©: {e}")
            return {'total_errors': 0}

    def _export_qc_report(self):
        """Exporte le rapport de contr√¥le qualit√©."""
        if not self.qc_results:
            messagebox.showwarning("Attention", "Aucune analyse √† exporter. Veuillez d'abord lancer l'analyse.")
            return

        try:
            # G√©n√©rer le nom de fichier depuis les informations d√©tect√©es
            commune = self.detected_info.get('commune', 'Commune')
            insee = self.detected_info.get('insee', 'INSEE')
            collaborateur = self.detected_info.get('collaborateur', 'Collaborateur')

            # Nettoyer les noms pour le fichier (enlever caract√®res sp√©ciaux)
            commune_clean = "".join(c for c in commune if c.isalnum() or c in (' ', '-', '_')).strip()
            collaborateur_clean = "".join(c for c in collaborateur if c.isalnum() or c in (' ', '-', '_')).strip()

            filename = f"Etat_De_Lieu_{commune_clean}_{insee}_{collaborateur_clean}.xlsx"

            # Demander o√π sauvegarder avec param√®tres compatibles
            file_path = filedialog.asksaveasfilename(
                title="Sauvegarder le rapport de contr√¥le qualit√©",
                initialfile=filename,
                defaultextension=".xlsx",
                filetypes=[("Fichiers Excel", "*.xlsx"), ("Tous les fichiers", "*.*")]
            )

            if not file_path:
                return

            self._update_status("waiting", "G√©n√©ration du rapport...")
            self.progress_var.set(50)

            def generate_report():
                return self._generate_excel_report(file_path)

            def on_success(success):
                if success:
                    self._update_status("success", "Rapport export√© avec succ√®s")
                    if hasattr(self, 'report_status'):
                        self.report_status.config(text="üìä Rapport: ‚úÖ Export√©", fg=COLORS['SUCCESS'])
                    self.progress_var.set(100)
                    messagebox.showinfo("Succ√®s", f"Rapport export√© vers:\n{file_path}")
                    self.logger.info(f"Rapport export√©: {file_path}")
                else:
                    self._update_status("error", "Erreur lors de l'export")
                    self.progress_var.set(0)
                    messagebox.showerror("Erreur", "√âchec de la g√©n√©ration du rapport Excel.\nV√©rifiez les logs pour plus de d√©tails.")

            def on_error(error):
                self._update_status("error", "Erreur lors de l'export")
                self.progress_var.set(0)
                error_msg = f"Erreur lors de l'export:\n{str(error)}"
                if len(error_msg) > 200:
                    error_msg = error_msg[:200] + "...\n\nVoir les logs pour plus de d√©tails."
                messagebox.showerror("Erreur", error_msg)
                self.logger.error(f"Erreur export rapport: {error}")
                import traceback
                self.logger.error(f"Traceback: {traceback.format_exc()}")

            # G√©n√©rer de mani√®re asynchrone
            run_async_task(generate_report, on_success, on_error, "Export rapport")

        except Exception as e:
            self.logger.error(f"Erreur lors de l'export: {e}")
            messagebox.showerror("Erreur", f"Erreur lors de l'export:\n{e}")
    
    def _generate_excel_report(self, file_path: str) -> bool:
        """G√©n√®re le rapport Excel avec 2 feuilles."""
        try:
            self.logger.info(f"D√©but g√©n√©ration rapport Excel: {file_path}")

            # V√©rifier que les r√©sultats QC existent
            if not self.qc_results:
                raise ValueError("Aucun r√©sultat d'analyse disponible pour l'export")

            # Nettoyer le chemin du fichier
            file_path = os.path.abspath(file_path)
            self.logger.info(f"Chemin absolu du fichier: {file_path}")

            # V√©rifier que le r√©pertoire existe
            directory = os.path.dirname(file_path)
            if not os.path.exists(directory):
                os.makedirs(directory, exist_ok=True)
                self.logger.info(f"R√©pertoire cr√©√©: {directory}")

            # G√©n√©rer les donn√©es des 3 feuilles d'abord
            page1_data, page2_data, page3_data = self._prepare_excel_data()
            self.logger.info("Donn√©es Excel pr√©par√©es pour 3 feuilles")

            # Cr√©er le fichier Excel de mani√®re isol√©e
            success = self._write_excel_file(file_path, page1_data, page2_data, page3_data)

            if success:
                # V√©rifier que le fichier a √©t√© cr√©√©
                if os.path.exists(file_path):
                    file_size = os.path.getsize(file_path)
                    self.logger.info(f"Fichier cr√©√© avec succ√®s: {file_path} ({file_size} bytes)")
                    return True
                else:
                    raise FileNotFoundError(f"Le fichier n'a pas √©t√© cr√©√©: {file_path}")
            else:
                return False

        except Exception as e:
            self.logger.error(f"Erreur g√©n√©ration rapport Excel: {e}")
            import traceback
            self.logger.error(f"Traceback complet: {traceback.format_exc()}")
            return False

    def _prepare_excel_data(self):
        """Pr√©pare les donn√©es pour les 3 feuilles Excel selon la nouvelle structure."""
        try:
            summary = self.qc_results.get('summary', {})
            commune = summary.get('commune', 'COMMUNE')
            collaborateur = summary.get('collaborateur', 'COLLABORATEUR')
            insee = summary.get('insee', 'INSEE')
            id_tache = summary.get('id_tache', 'ID_TACHE')
            domaine = summary.get('domaine', '')
            cms_total = summary.get('cms_total', '')
            pa_total = summary.get('pa_total', '')

            # Page 1: Structure selon le nouveau mod√®le avec sections √©tendues
            page1_data = [
                # En-t√™te principal (ligne 1-2)
                ['Nom de commune', 'ID t√¢che Plan Adressage', 'Code INSEE', 'Domaine', 'AFFECTATION', 'Controleur', '', '', '', ''],
                [commune, id_tache, insee, domaine, collaborateur, '', '', '', '', ''],  # Collaborateur depuis colonne U, Contr√¥leur vide
                ['', '', '', '', '', '', '', '', '', ''],  # Ligne vide

                # Section CMS (lignes 4-5) - Avec formules Excel dynamiques
                ['Nbr voies CMS Total', 'Nbr voies CMS Controll√©', 'Nbr voies KO', '% Erreur CMS', '', '', '', '', '', ''],
                [cms_total, '', '=SUMPRODUCT(--(\'Controle Qualit√© CMS\'!A2:A1000<>""))', '=IF(A5=0,0,C5/A5)', '', '', '', '', '', ''],  # Formules dynamiques - SUMPRODUCT compte seulement les cellules vraiment non vides
                ['', '', '', '', '', '', '', '', '', ''],  # Ligne vide

                # Section PA (lignes 7-8)
                ['Nbr IMB PA Total', 'Nbr IMB PA Controll√©', 'Nbr IMB PA KO', '% Erreur PA', '', '', '', '', '', ''],
                [pa_total, '', '=SUMPRODUCT(--(\'Controle Qualit√© PA\'!A2:A1000<>""))', '=IF(A8=0,0,C8/A8)', '', '', '', '', '', ''],  # Total PA depuis colonne H + formule pour compter seulement les codes IMB vraiment pr√©sents de la page 3 + formule % Erreur PA
                ['', '', '', '', '', '', '', '', '', ''],  # Ligne vide

                # Section Tickets (lignes 10-11)
                ['Ticket 501/511', 'Ticket UPR', '% Erreur Banbou', '', '', '', '', '', '', ''],
            ]

            # Calculer les pourcentages avec pond√©rations (pour les valeurs statiques)
            resume_erreurs_data = self._calculate_resume_erreurs()

            # Remplir les statuts des tickets et calculer % Erreur Banbou
            if self.qc_results and 'critere_2' in self.qc_results:
                critere_2 = self.qc_results['critere_2']
                ticket_501_511_status = critere_2.get('ticket_501_511_status', '')
                ticket_upr_status = critere_2.get('ticket_upr_status', '')

                # Calculer le % Erreur Banbou
                erreur_banbou_percentage = self._calculate_erreur_banbou_percentage()
                erreur_banbou_str = f"{erreur_banbou_percentage:.0f}%"

                page1_data.append([ticket_501_511_status, ticket_upr_status, erreur_banbou_str, '', '', '', 'R√©sum√© Erreurs', '', '', ''])
            else:
                # Pas de donn√©es d'analyse, afficher vides
                page1_data.append(['', '', '', '', '', '', 'R√©sum√© Erreurs', '', '', ''])

            # Pr√©parer les donn√©es d'√©cart Plan Adressage
            motifs_data = []
            if self.qc_results and 'critere_0' in self.qc_results:
                critere_0 = self.qc_results['critere_0']
                ecart_data = critere_0.get('ecart_plan_adressage', {})

                # Motifs dans l'ordre d'affichage
                motifs_ordre = ['AD RAS', 'OK', 'NOK', 'UPR RAS', 'UPR OK', 'UPR NOK', 'HORS COMMUNE']

                for motif in motifs_ordre:
                    if motif in ecart_data:
                        data = ecart_data[motif]
                        suivi_count = data['suivi_count']
                        qgis_count = data['qgis_count']
                        motif_display = motif.title() if motif != 'HORS COMMUNE' else 'Hors Commune'
                        motifs_data.append([motif_display, str(suivi_count), str(qgis_count)])
                    else:
                        motif_display = motif.title() if motif != 'HORS COMMUNE' else 'Hors Commune'
                        motifs_data.append([motif_display, '', ''])
            else:
                # Pas de donn√©es d'analyse, afficher les motifs vides
                motifs_ordre = ['AD RAS', 'OK', 'NOK', 'UPR RAS', 'UPR OK', 'UPR NOK', 'Hors Commune']
                for motif in motifs_ordre:
                    motifs_data.append([motif, '', ''])

            # Section Ecart Plan Adressage et r√©sum√© erreurs int√©gr√©s avec formules Excel dynamiques
            page1_data.extend([
                ['', '', '', '', '', '', '% Erreur Par Cat√©gorie', '% Brut', 'Pond√©ration', 'Taux'],  # Ligne 12 - En-t√™te avec nouvelle colonne
                ['Ecart Plan Adressage', '', '', '', '', '', '% Erreur CMS', '=D5', resume_erreurs_data['ponderation_cms'], '=H13*I13'],  # Ligne 13 - Formule pour % CMS
                ['Motif', 'Suivi', 'Resultats Qgis', '', '', '', '% Erreur PA', '=D8', resume_erreurs_data['ponderation_pa'], '=H14*I14'],  # Ligne 14 - Formule pour r√©f√©rencer % Erreur PA
                [motifs_data[0][0], motifs_data[0][1], motifs_data[0][2], '', '', '', '% Erreur Banbou', resume_erreurs_data['pourcentage_banbou_brut'], resume_erreurs_data['ponderation_banbou'], '=H15*I15'],  # Ligne 15 - Ad Ras
                [motifs_data[1][0], motifs_data[1][1], motifs_data[1][2], '', '', '', '% Ecart Plan Adressage', resume_erreurs_data['pourcentage_ecart_brut'], resume_erreurs_data['ponderation_ecart'], '=H16*I16'],  # Ligne 16 - Ok
                [motifs_data[2][0], motifs_data[2][1], motifs_data[2][2], '', '', '', '% Total', '', '', '=J13+J14+J15+J16'],  # Ligne 17 - Nok (formule pour total)
                [motifs_data[3][0], motifs_data[3][1], motifs_data[3][2], '', '', '', '', '', '', ''],  # Ligne 18 - Upr Ras
                [motifs_data[4][0], motifs_data[4][1], motifs_data[4][2], '', '', '', '', '', '', ''],  # Ligne 19 - Upr Ok
                [motifs_data[5][0], motifs_data[5][1], motifs_data[5][2], '', '', '', '', '', '', ''],  # Ligne 20 - Upr Nok
                [motifs_data[6][0], motifs_data[6][1], motifs_data[6][2], '', '', '', '', '', '', ''],  # Ligne 21 - Hors Commune
            ])

            # Ajouter la ligne % Ecart Plan Adressage directement sous le tableau (ligne 22)
            page1_data.extend([
                ['% Ecart Plan Adressage', '=H16', '', '', '', '', '', '', '', ''],  # Ligne 22 - Formule r√©f√©ren√ßant H16 (% Brut Ecart Plan Adressage)
                ['', '', '', '', '', '', '', '', '', ''],  # Ligne vide finale
            ])

            # Page 2: Controle Qualit√© CMS - Structure vide pour saisie manuelle
            page2_data = [
                # En-t√™te avec les colonnes sp√©cifi√©es
                ['ID Tache', 'Voie demand√©', 'Motif Voie Initial', 'Etat', 'Commentaire Controleur']
            ]

            # Ajouter des lignes vides pour la saisie manuelle (pas de remplissage automatique)
            for i in range(20):  # 20 lignes vides pour saisie manuelle
                page2_data.append([' ', ' ', ' ', ' ', ' '])  # Espaces au lieu de cha√Ænes vides (5 colonnes)

            # Page 3: Controle Qualit√© PA - Structure avec colonnes sp√©cifi√©es + colonne Batiment
            page3_data = [
                # En-t√™te avec les colonnes sp√©cifi√©es + nouvelle colonne Batiment apr√®s Adresse Optimum
                ['Num Dossier Site', 'Adresse Optimum', 'Batiment', 'Adresse BAN', 'Motif Initial', 'Etat', 'Commentaire Controleur', '']
            ]

            # Cr√©er un dictionnaire pour mapper les codes IMB aux donn√©es de b√¢timent (colonne F page 2 suivi commune)
            imb_to_batiment = {}
            if hasattr(self, 'current_suivi_file_path') and self.current_suivi_file_path:
                try:
                    pd = get_pandas()
                    # Lire la page 2 (index 1) du fichier suivi commune pour r√©cup√©rer les donn√©es de b√¢timent
                    suivi_page2_df = pd.read_excel(self.current_suivi_file_path, sheet_name=1, date_format=None)

                    self.logger.info(f"Page 2 suivi commune charg√©e pour b√¢timents: {suivi_page2_df.shape}")

                    # Extraire les donn√©es des colonnes A (IMB) et F (Batiment)
                    if len(suivi_page2_df.columns) >= 6:  # Au moins 6 colonnes (A-F)
                        for index, row in suivi_page2_df.iterrows():
                            imb_code = str(row.iloc[0]).strip() if pd.notna(row.iloc[0]) else ''  # Colonne A: IMB
                            batiment = str(row.iloc[5]).strip() if pd.notna(row.iloc[5]) else ''  # Colonne F: Batiment

                            # Ajouter au dictionnaire si les deux valeurs sont pr√©sentes
                            if imb_code and imb_code not in ['', 'nan', 'IMB', 'Num Dossier Site']:
                                imb_to_batiment[imb_code] = batiment

                    self.logger.info(f"Mapping IMB->Batiment cr√©√©: {len(imb_to_batiment)} entr√©es")

                except Exception as e:
                    self.logger.error(f"Erreur lecture page 2 suivi commune pour b√¢timents: {e}")
                    imb_to_batiment = {}

            # Ajouter les donn√©es des CRIT√àRES 3, 4 et 5 si disponibles
            toutes_erreurs_detectees = []

            # CRIT√àRE 3: Doublons IMB et erreurs motif OK
            if self.qc_results and 'critere_3' in self.qc_results:
                critere_3 = self.qc_results['critere_3']
                doublons_suspects = critere_3.get('doublons_suspects', [])
                erreurs_motif_ok = critere_3.get('erreurs_motif_ok', [])
                toutes_erreurs_detectees.extend(doublons_suspects + erreurs_motif_ok)

            # CRIT√àRE 4: AD √† analyser
            if self.qc_results and 'critere_4' in self.qc_results:
                critere_4 = self.qc_results['critere_4']
                ad_a_analyser_entries = critere_4.get('ad_a_analyser_entries', [])
                toutes_erreurs_detectees.extend(ad_a_analyser_entries)

            # CRIT√àRE 5: Motifs incorrects
            if self.qc_results and 'critere_5' in self.qc_results:
                critere_5 = self.qc_results['critere_5']
                motifs_incorrects_entries = critere_5.get('motifs_incorrects_entries', [])
                toutes_erreurs_detectees.extend(motifs_incorrects_entries)

            if toutes_erreurs_detectees:
                # Compter par type
                c3_doublons = len([e for e in toutes_erreurs_detectees if e.get('type') == 'DOUBLON_IMB_SUSPECT'])
                c3_motif_ok = len([e for e in toutes_erreurs_detectees if e.get('type') == 'ERREUR_MOTIF_OK_ADRESSE_IDENTIQUE'])
                c4_ad_analyser = len([e for e in toutes_erreurs_detectees if e.get('type') == 'AD_A_ANALYSER_AVEC_IMB'])
                c5_motifs_incorrects = len([e for e in toutes_erreurs_detectees if e.get('type') == 'MOTIF_INCORRECT'])

                self.logger.info(f"Ajout de {len(toutes_erreurs_detectees)} erreurs √† la page 3 (C3: {c3_doublons} doublons + {c3_motif_ok} motif OK, C4: {c4_ad_analyser} ad √† analyser, C5: {c5_motifs_incorrects} motifs incorrects)")

                for erreur in toutes_erreurs_detectees:
                    # Pour le crit√®re 5 (motifs incorrects), utiliser le motif incorrect comme motif initial
                    motif_initial = erreur.get('motif_incorrect', '') if erreur.get('type') == 'MOTIF_INCORRECT' else erreur.get('motif_initial', '')

                    # R√©cup√©rer les donn√©es de b√¢timent depuis le mapping IMB->Batiment
                    imb_code = erreur.get('imb_code', '')
                    batiment = imb_to_batiment.get(imb_code, '') if imb_code else ''

                    page3_data.append([
                        imb_code,                             # Colonne A: Num Dossier Site
                        erreur.get('adresse_optimum', ''),    # Colonne B: Adresse Optimum
                        batiment,                             # Colonne C: Batiment (depuis colonne F page 2 suivi commune)
                        erreur.get('adresse_ban', ''),        # Colonne D: Adresse BAN
                        motif_initial,                        # Colonne E: Motif Initial (ou motif incorrect pour C5)
                        '',                                    # Colonne F: Etat (vide pour saisie avec validation Nok-Mineure/Nok Majeure)
                        '',                                    # Colonne G: Commentaire Controleur (vide pour saisie)
                        ''                                     # Colonne H: Suppl√©mentaire
                    ])

            # Ajouter des lignes vides suppl√©mentaires pour la saisie manuelle
            lignes_vides_necessaires = max(0, 20 - (len(page3_data) - 1))  # -1 pour l'en-t√™te
            for i in range(lignes_vides_necessaires):
                page3_data.append([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '])  # Espaces au lieu de cha√Ænes vides (8 colonnes maintenant)

            return page1_data, page2_data, page3_data

        except Exception as e:
            self.logger.error(f"Erreur pr√©paration donn√©es Excel: {e}")
            raise

    def _write_excel_file(self, file_path: str, page1_data: list, page2_data: list, page3_data: list) -> bool:
        """√âcrit le fichier Excel avec 3 feuilles et mise en forme."""
        try:
            pd = get_pandas()

            # Obtenir les informations pour les noms de feuilles
            summary = self.qc_results.get('summary', {}) if self.qc_results else {}
            commune = summary.get('commune', 'Commune')
            collaborateur = summary.get('collaborateur', 'Collaborateur')

            # Cr√©er les DataFrames avec colonnes appropri√©es
            df_page1 = pd.DataFrame(page1_data, columns=['Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10'])
            df_page2 = pd.DataFrame(page2_data, columns=['Col1', 'Col2', 'Col3', 'Col4', 'Col5'])  # 5 colonnes maintenant
            df_page3 = pd.DataFrame(page3_data, columns=['Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8'])  # 8 colonnes maintenant (ajout colonne Batiment)

            self.logger.info("DataFrames cr√©√©s pour 3 feuilles")

            # Noms des feuilles selon la nouvelle structure
            sheet1_name = f"Etat de lieu {commune}_{collaborateur}"
            sheet2_name = "Controle Qualit√© CMS"
            sheet3_name = "Controle Qualit√© PA"

            # Limiter la longueur des noms de feuilles (Excel limite √† 31 caract√®res)
            if len(sheet1_name) > 31:
                sheet1_name = f"Etat de lieu {commune[:10]}_{collaborateur[:10]}"
                if len(sheet1_name) > 31:
                    sheet1_name = "Etat de lieu"

            # √âcrire le fichier Excel avec mise en forme
            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                # Page 1: Etat de lieu avec mise en forme
                df_page1.to_excel(writer, sheet_name=sheet1_name, index=False, header=False)

                # Appliquer la mise en forme √† la page 1
                self._format_page1(writer.sheets[sheet1_name])

                # Page 2: Controle Qualit√© CMS (avec structure)
                df_page2.to_excel(writer, sheet_name=sheet2_name, index=False, header=False)

                # Appliquer la mise en forme √† la page 2
                self._format_page2(writer.sheets[sheet2_name])

                # Page 3: Controle Qualit√© PA (avec structure)
                # S'assurer que toutes les lignes ont 7 colonnes
                page3_data_fixed = []
                for row in page3_data:
                    row_copy = row.copy() if isinstance(row, list) else list(row)
                    if len(row_copy) < 7:
                        row_copy.extend([' '] * (7 - len(row_copy)))  # Ajouter des espaces si n√©cessaire
                    page3_data_fixed.append(row_copy[:7])  # Limiter √† 7 colonnes

                df_page3_fixed = pd.DataFrame(page3_data_fixed, columns=['Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7'])
                df_page3_fixed.to_excel(writer, sheet_name=sheet3_name, index=False, header=False)

                # Appliquer la mise en forme √† la page 3
                self._format_page3(writer.sheets[sheet3_name])

                self.logger.info(f"3 feuilles Excel √©crites: {sheet1_name}, {sheet2_name}, {sheet3_name}")

            self.logger.info("Fichier Excel √©crit avec succ√®s avec mise en forme")
            return True

        except Exception as e:
            self.logger.error(f"Erreur √©criture fichier Excel: {e}")
            return False

    def _format_page1(self, worksheet):
        """Applique la mise en forme √† la page 1 selon le mod√®le (avec bordures)."""
        try:
            from openpyxl.styles import PatternFill, Font, Alignment, Border, Side

            # D√©finir les couleurs selon votre mod√®le
            blue_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            green_fill = PatternFill(start_color="70AD47", end_color="70AD47", fill_type="solid")
            orange_fill = PatternFill(start_color="C65911", end_color="C65911", fill_type="solid")

            # Police blanche pour les en-t√™tes (Calibri 11)
            white_font = Font(color="FFFFFF", bold=True, size=11, name="Calibri")
            bold_font = Font(bold=True, size=11, name="Calibri")
            normal_font = Font(size=11, name="Calibri")

            # Alignement centr√©
            center_alignment = Alignment(horizontal="center", vertical="center")

            # D√©finir les bordures
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            # Appliquer la mise en forme selon les sections (AVEC BORDURES)

            # En-t√™te principal (ligne 1) - Bleu avec bordures
            for col in range(1, 7):  # A1:F1
                cell = worksheet.cell(row=1, column=col)
                cell.fill = blue_fill
                cell.font = white_font
                cell.alignment = center_alignment
                cell.border = thin_border

            # Section CMS (lignes 4-5) - Vert avec bordures
            for row in range(4, 6):  # Lignes 4-5
                for col in range(1, 5):  # A4:D5
                    cell = worksheet.cell(row=row, column=col)
                    if row == 4:  # En-t√™te
                        cell.fill = green_fill
                        cell.font = white_font
                    cell.alignment = center_alignment
                    cell.border = thin_border

            # Section PA (lignes 7-8) - Orange avec bordures
            for row in range(7, 9):  # Lignes 7-8
                for col in range(1, 5):  # A7:D8
                    cell = worksheet.cell(row=row, column=col)
                    if row == 7:  # En-t√™te
                        cell.fill = orange_fill
                        cell.font = white_font
                    cell.alignment = center_alignment
                    cell.border = thin_border

            # Section Tickets (lignes 10-11) - Bleu avec bordures
            for row in range(10, 12):  # Lignes 10-11
                for col in range(1, 4):  # A10:C11
                    cell = worksheet.cell(row=row, column=col)
                    if row == 10:  # En-t√™te
                        cell.fill = blue_fill
                        cell.font = white_font
                    cell.alignment = center_alignment
                    cell.border = thin_border

            # Section R√©sum√© Erreurs (G11:J17) - Bleu avec bordures - Cons√©cutif (ajout colonne % Brut)
            for row in range(11, 18):  # Lignes 11-17 (tableau cons√©cutif)
                for col in range(7, 11):  # G11:J17 (ajout colonne J pour % Brut)
                    cell = worksheet.cell(row=row, column=col)
                    if row == 11 or row == 12:  # En-t√™tes (R√©sum√© Erreurs + % Erreur Par Cat√©gorie)
                        cell.fill = blue_fill
                        cell.font = white_font
                    cell.alignment = center_alignment
                    cell.border = thin_border

            # Section Ecart Plan Adressage (lignes 13-21) - Bleu avec bordures
            for row in range(13, 22):  # Lignes 13-21
                for col in range(1, 4):  # A13:C21
                    cell = worksheet.cell(row=row, column=col)
                    if row == 13 or row == 14:  # En-t√™tes
                        cell.fill = blue_fill
                        cell.font = white_font
                    cell.alignment = center_alignment
                    cell.border = thin_border

            # Section % Ecart Plan Adressage sous le tableau (ligne 22) - Bleu avec bordures
            for col in range(1, 3):  # A22:B22 (seulement 2 colonnes)
                cell = worksheet.cell(row=22, column=col)
                cell.fill = blue_fill
                cell.font = white_font
                cell.alignment = center_alignment
                cell.border = thin_border

            # Ajuster la largeur des colonnes
            worksheet.column_dimensions['A'].width = 20
            worksheet.column_dimensions['B'].width = 25
            worksheet.column_dimensions['C'].width = 15
            worksheet.column_dimensions['D'].width = 15
            worksheet.column_dimensions['E'].width = 15
            worksheet.column_dimensions['F'].width = 15
            worksheet.column_dimensions['G'].width = 20
            worksheet.column_dimensions['H'].width = 10
            worksheet.column_dimensions['I'].width = 12
            worksheet.column_dimensions['J'].width = 10

            # Appliquer l'alignement centr√© aux cellules de donn√©es
            # Centrer toutes les cellules de donn√©es, y compris les motifs
            for row in range(1, 25):  # Lignes 1 √† 24 (pour couvrir tous les motifs)
                for col in range(1, 11):  # Colonnes A √† J
                    cell = worksheet.cell(row=row, column=col)
                    # Appliquer l'alignement centr√© √† toutes les cellules
                    cell.alignment = center_alignment
                    # Appliquer la police Calibri 11 √† toutes les cellules
                    if not cell.font.bold:  # Ne pas changer la police des en-t√™tes en gras
                        cell.font = normal_font

            # Ajouter une validation des donn√©es pour la cellule Contr√¥leur (F2)
            self._add_controleur_validation(worksheet)

            # Appliquer le formatage des pourcentages aux cellules avec formules
            self._apply_percentage_formatting(worksheet)

            self.logger.info("Mise en forme appliqu√©e √† la page 1 (avec bordures)")

        except Exception as e:
            self.logger.warning(f"Erreur lors de la mise en forme: {e}")
            # Continue sans mise en forme si erreur

    def _add_controleur_validation(self, worksheet):
        """Ajoute une validation des donn√©es pour la cellule Contr√¥leur."""
        try:
            from openpyxl.worksheet.datavalidation import DataValidation

            # Importer la liste des collaborateurs depuis constants.py
            from config.constants import VALIDATION_LISTS
            collaborateurs_list = VALIDATION_LISTS.get("Collaborateur", [])

            if not collaborateurs_list:
                self.logger.warning("Liste des collaborateurs vide, validation ignor√©e")
                return

            # Cr√©er une feuille cach√©e pour la liste des collaborateurs
            # Cela √©vite les probl√®mes avec les formules longues
            if 'ValidationData' not in [ws.title for ws in worksheet.parent.worksheets]:
                validation_sheet = worksheet.parent.create_sheet('ValidationData')
                validation_sheet.sheet_state = 'hidden'

                # √âcrire la liste des collaborateurs dans la feuille cach√©e
                for i, collab in enumerate(collaborateurs_list, 1):
                    validation_sheet.cell(row=i, column=1, value=collab)

                # Cr√©er la validation des donn√©es avec r√©f√©rence √† la feuille cach√©e
                range_ref = f"ValidationData!$A$1:$A${len(collaborateurs_list)}"
                dv = DataValidation(
                    type="list",
                    formula1=range_ref,
                    allow_blank=True
                )
            else:
                # Si la feuille existe d√©j√†, utiliser la r√©f√©rence existante
                range_ref = f"ValidationData!$A$1:$A${len(collaborateurs_list)}"
                dv = DataValidation(
                    type="list",
                    formula1=range_ref,
                    allow_blank=True
                )

            dv.error = "Veuillez s√©lectionner un contr√¥leur dans la liste."
            dv.errorTitle = "Contr√¥leur invalide"
            dv.prompt = "S√©lectionnez un contr√¥leur dans la liste d√©roulante."
            dv.promptTitle = "S√©lection du contr√¥leur"

            # Appliquer la validation √† la cellule F2 (Contr√¥leur)
            dv.add('F2')
            worksheet.add_data_validation(dv)

            self.logger.info("Validation des donn√©es ajout√©e pour le contr√¥leur")

        except Exception as e:
            self.logger.warning(f"Erreur lors de l'ajout de la validation des donn√©es: {e}")
            # Continue sans validation si erreur

    def _apply_percentage_formatting(self, worksheet):
        """Applique le formatage des pourcentages aux cellules contenant des formules de pourcentage."""
        try:
            from openpyxl.styles import NamedStyle

            # Cr√©er un style de pourcentage si il n'existe pas
            try:
                percentage_style = worksheet.parent.named_styles['Percentage']
            except KeyError:
                percentage_style = NamedStyle(name='Percentage', number_format='0%')
                worksheet.parent.add_named_style(percentage_style)

            # Appliquer le formatage des pourcentages aux cellules avec formules de pourcentage
            percentage_cells = [
                'D5',   # % Erreur CMS
                'D8',   # % Erreur PA
                'H13',  # % Brut CMS (R√©sum√© Erreurs)
                'H14',  # % Brut PA (R√©sum√© Erreurs)
                'H15',  # % Brut Banbou (R√©sum√© Erreurs)
                'H16',  # % Brut Ecart Plan Adressage (R√©sum√© Erreurs)
                'J13',  # Taux CMS (R√©sum√© Erreurs)
                'J14',  # Taux PA (R√©sum√© Erreurs)
                'J15',  # Taux Banbou (R√©sum√© Erreurs)
                'J16',  # Taux Ecart Plan Adressage (R√©sum√© Erreurs)
                'J17',  # % Total (R√©sum√© Erreurs)
                'B22'   # % Ecart Plan Adressage final
            ]

            for cell_ref in percentage_cells:
                cell = worksheet[cell_ref]
                cell.number_format = '0%'

            self.logger.info("Formatage des pourcentages appliqu√©")

        except Exception as e:
            self.logger.warning(f"Erreur lors du formatage des pourcentages: {e}")
            # Continue sans formatage si erreur

    def _format_page3(self, worksheet):
        """Applique la mise en forme √† la page 3 - Contr√¥le Qualit√© PA."""
        try:
            from openpyxl.styles import PatternFill, Font, Alignment

            # D√©finir les styles
            blue_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            white_font = Font(color="FFFFFF", bold=True, size=11, name="Calibri")
            center_alignment = Alignment(horizontal="center", vertical="center")

            # Mise en forme de l'en-t√™te (ligne 1)
            header_columns = ['A', 'B', 'C', 'D', 'E', 'F']
            for col_letter in header_columns:
                cell = worksheet[f"{col_letter}1"]
                cell.fill = blue_fill
                cell.font = white_font
                cell.alignment = center_alignment

            # Ajuster la largeur des colonnes selon le contenu
            worksheet.column_dimensions['A'].width = 18  # Num Dossier Site
            worksheet.column_dimensions['B'].width = 25  # Adresse Optimum
            worksheet.column_dimensions['C'].width = 25  # Adresse BAN
            worksheet.column_dimensions['D'].width = 15  # Motif Initial
            worksheet.column_dimensions['E'].width = 15  # Etat
            worksheet.column_dimensions['F'].width = 20  # Commentaire Controleur
            worksheet.column_dimensions['G'].width = 10  # Colonne suppl√©mentaire

            # Ajouter la validation de donn√©es pour la colonne E (Etat)
            from openpyxl.worksheet.datavalidation import DataValidation
            validation_options = '"Nok-Mineure,Nok Majeure"'
            dv = DataValidation(type="list", formula1=validation_options, allow_blank=True)
            dv.error = "Veuillez s√©lectionner une option valide"
            dv.errorTitle = "Valeur incorrecte"
            dv.prompt = "S√©lectionnez: Nok-Mineure ou Nok Majeure"
            dv.promptTitle = "Etat"

            # Appliquer la validation aux lignes 2 √† 22 (donn√©es + lignes vides)
            dv.add(f"E2:E22")
            worksheet.add_data_validation(dv)

            # Appliquer l'alignement centr√© √† toutes les cellules de donn√©es
            for row in range(1, 22):  # Lignes 1 √† 21 (en-t√™te + 20 lignes de donn√©es)
                for col in range(1, 8):  # Colonnes A √† G
                    cell = worksheet.cell(row=row, column=col)
                    cell.alignment = center_alignment

            self.logger.info("Mise en forme appliqu√©e √† la page 3 - Contr√¥le Qualit√© PA")

        except Exception as e:
            self.logger.warning(f"Erreur lors de la mise en forme de la page 3: {e}")
            # Continue sans mise en forme si erreur

    def _format_page2(self, worksheet):
        """Applique la mise en forme √† la page 2 - Contr√¥le Qualit√© CMS."""
        try:
            from openpyxl.styles import PatternFill, Font, Alignment
            from openpyxl.worksheet.datavalidation import DataValidation

            # D√©finir les styles
            blue_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            white_font = Font(color="FFFFFF", bold=True, size=11, name="Calibri")
            center_alignment = Alignment(horizontal="center", vertical="center")

            # Mise en forme de l'en-t√™te (ligne 1) - 5 colonnes seulement
            header_columns = ['A', 'B', 'C', 'D', 'E']
            for col_letter in header_columns:
                cell = worksheet[f"{col_letter}1"]
                cell.fill = blue_fill
                cell.font = white_font
                cell.alignment = center_alignment

            # Ajuster la largeur des colonnes selon le contenu
            worksheet.column_dimensions['A'].width = 15  # ID Tache
            worksheet.column_dimensions['B'].width = 30  # Voie demand√©
            worksheet.column_dimensions['C'].width = 20  # Motif Voie Initial
            worksheet.column_dimensions['D'].width = 20  # Etat (√©largie pour validation)
            worksheet.column_dimensions['E'].width = 25  # Commentaire Controleur

            # Ajouter la validation de donn√©es pour la colonne D (Etat)
            validation_options = '"Nok-Mineure,Nok Majeure"'
            dv = DataValidation(type="list", formula1=validation_options, allow_blank=True)
            dv.error = "Veuillez s√©lectionner une option valide"
            dv.errorTitle = "Valeur incorrecte"
            dv.prompt = "S√©lectionnez: Nok-Mineure ou Nok Majeure"
            dv.promptTitle = "Etat"

            # Appliquer la validation aux lignes 2 √† 22 (donn√©es + lignes vides)
            dv.add(f"D2:D22")
            worksheet.add_data_validation(dv)

            # Appliquer l'alignement centr√© √† toutes les cellules de donn√©es
            for row in range(1, 22):  # Lignes 1 √† 21 (en-t√™te + 20 lignes de donn√©es)
                for col in range(1, 6):  # Colonnes A √† E (5 colonnes)
                    cell = worksheet.cell(row=row, column=col)
                    cell.alignment = center_alignment

            self.logger.info("Mise en forme de la page 2 appliqu√©e avec validation de donn√©es")

        except Exception as e:
            self.logger.warning(f"Erreur lors de la mise en forme de la page 2: {e}")
            # Continue sans mise en forme si erreur





    def _calculate_error_percentage(self) -> float:
        """Calcule le pourcentage d'erreur."""
        try:
            summary = self.qc_results.get('summary', {})
            total_errors = summary.get('total_errors', 0)

            # Base de calcul (nombre total d'enregistrements analys√©s)
            total_records = 0
            if self.qgis_data is not None:
                total_records += len(self.qgis_data)
            if self.suivi_data is not None:
                total_records += len(self.suivi_data)

            if total_records > 0:
                return (total_errors / total_records) * 100
            return 0.0

        except Exception:
            return 0.0

    def _calculate_erreur_banbou_percentage(self) -> float:
        """
        Calcule le % Erreur Banbou bas√© sur les statuts des tickets UPR et 501/511.

        Logique:
        - Si les deux tickets sont OK ou N/A ‚Üí 0%
        - Si les deux tickets sont NOK ‚Üí 100%
        - Si un OK et un NOK ‚Üí 50%

        Returns:
            float: Pourcentage d'erreur Banbou (0.0 √† 100.0)
        """
        try:
            if not self.qc_results or 'critere_2' not in self.qc_results:
                return 0.0

            critere_2 = self.qc_results['critere_2']
            ticket_upr_status = critere_2.get('ticket_upr_status', 'N/A')
            ticket_501_511_status = critere_2.get('ticket_501_511_status', 'N/A')

            # Compter les tickets NOK
            nok_count = 0
            total_tickets = 0

            # Analyser ticket UPR
            if ticket_upr_status in ['OK', 'NOK']:
                total_tickets += 1
                if ticket_upr_status == 'NOK':
                    nok_count += 1

            # Analyser ticket 501/511
            if ticket_501_511_status in ['OK', 'NOK']:
                total_tickets += 1
                if ticket_501_511_status == 'NOK':
                    nok_count += 1

            # Calculer le pourcentage
            if total_tickets == 0:
                # Aucun ticket requis (tous N/A) ‚Üí 0% d'erreur
                percentage = 0.0
            else:
                # Pourcentage = (nombre de NOK / total de tickets) * 100
                percentage = (nok_count / total_tickets) * 100.0

            self.logger.info(f"Calcul % Erreur Banbou: UPR={ticket_upr_status}, 501/511={ticket_501_511_status}, "
                           f"NOK={nok_count}/{total_tickets}, R√©sultat={percentage}%")

            return percentage

        except Exception as e:
            self.logger.error(f"Erreur calcul % Erreur Banbou: {e}")
            return 0.0

    def _calculate_resume_erreurs(self) -> Dict[str, str]:
        """Calcule les pourcentages du r√©sum√© erreurs avec pond√©rations."""
        try:
            # Pond√©rations fixes (constantes)
            ponderation_cms = "0,3"
            ponderation_pa = "0,6"
            ponderation_banbou = "0,05"
            ponderation_ecart = "0,05"

            # Calculer les pourcentages bruts
            pourcentage_cms_brut = 0.0  # √Ä calculer selon vos crit√®res CMS
            pourcentage_pa_brut = 0.0   # √Ä calculer selon vos crit√®res PA
            pourcentage_banbou_brut = self._calculate_erreur_banbou_percentage()  # Calcul√© selon les tickets
            pourcentage_ecart_brut = self._calculate_ecart_plan_adressage_percentage()

            # Convertir en pourcentage (diviser par 100 pour avoir une valeur sous 1)
            pourcentage_ecart_decimal = pourcentage_ecart_brut / 100.0

            # Calculer les taux pond√©r√©s (pourcentage d√©cimal * pond√©ration)
            taux_cms = pourcentage_cms_brut * 0.3
            taux_pa = pourcentage_pa_brut * 0.6
            taux_banbou = pourcentage_banbou_brut * 0.05
            taux_ecart = pourcentage_ecart_decimal * 0.05

            # Calculer le total
            total = taux_cms + taux_pa + taux_banbou + taux_ecart

            # Formater avec points comme s√©parateurs d√©cimaux (pas de virgules)
            return {
                'ponderation_cms': ponderation_cms,
                'ponderation_pa': ponderation_pa,
                'ponderation_banbou': ponderation_banbou,
                'ponderation_ecart': ponderation_ecart,
                # Pourcentages bruts (avant pond√©ration)
                'pourcentage_cms_brut': f"{pourcentage_cms_brut:.1f}%",
                'pourcentage_pa_brut': f"{pourcentage_pa_brut:.1f}%",
                'pourcentage_banbou_brut': f"{pourcentage_banbou_brut:.0f}%",
                'pourcentage_ecart_brut': f"{pourcentage_ecart_brut:.1f}%",
                # Taux pond√©r√©s (apr√®s multiplication par pond√©ration) - Format sans d√©cimales
                'taux_cms': f"{taux_cms:.0f}%",
                'taux_pa': f"{taux_pa:.0f}%",
                'taux_banbou': f"{taux_banbou:.0f}%",
                'taux_ecart': f"{taux_ecart:.0f}%",
                'total': f"{total:.0f}%",
                # Donn√©es suppl√©mentaires pour compatibilit√©
                'pourcentage_ecart_brut_percent': f"{pourcentage_ecart_brut:.2f}%",
                'pourcentage_banbou_brut_percent': f"{pourcentage_banbou_brut:.0f}%"
            }

        except Exception as e:
            self.logger.error(f"Erreur calcul r√©sum√© erreurs: {e}")
            return {
                'ponderation_cms': "0,3",
                'ponderation_pa': "0,6",
                'ponderation_banbou': "0,05",
                'ponderation_ecart': "0,05",
                'taux_cms': "0,000",
                'taux_pa': "0,000",
                'taux_banbou': "0,000",
                'taux_ecart': "0,000",
                'total': "0,000",
                'pourcentage_ecart_brut': "0,00",
                'pourcentage_ecart_brut_percent': "0,00%"
            }

    def _calculate_ecart_plan_adressage_percentage(self) -> float:
        """Calcule le pourcentage d'erreur sp√©cifique √† l'√©cart Plan Adressage."""
        try:
            if not self.qc_results or 'critere_0' not in self.qc_results:
                return 0.0

            critere_0 = self.qc_results['critere_0']
            ecart_data = critere_0.get('ecart_plan_adressage', {})

            total_ecarts = 0
            total_motifs = 0

            # Debug: afficher les donn√©es pour comprendre le calcul
            self.logger.debug("Calcul pourcentage √©cart Plan Adressage:")

            for motif, data in ecart_data.items():
                suivi_count = data.get('suivi_count', 0)
                qgis_count = data.get('qgis_count', 0)
                difference = data.get('difference', 0)
                has_ecart = data.get('has_ecart', False)

                # Utiliser le maximum comme base de calcul
                base_count = max(suivi_count, qgis_count)
                total_motifs += base_count

                # Ajouter l'√©cart absolu si il y en a un
                if has_ecart:
                    ecart_abs = abs(difference)
                    total_ecarts += ecart_abs
                    self.logger.debug(f"  {motif}: Suivi={suivi_count}, QGis={qgis_count}, √âcart={difference:+d}, Base={base_count}")
                else:
                    self.logger.debug(f"  {motif}: Suivi={suivi_count}, QGis={qgis_count}, Pas d'√©cart, Base={base_count}")

            self.logger.debug(f"  Total √©carts: {total_ecarts}, Total motifs: {total_motifs}")

            if total_motifs > 0:
                pourcentage = (total_ecarts / total_motifs) * 100
                self.logger.debug(f"  Pourcentage calcul√©: {pourcentage:.2f}%")
                return pourcentage
            return 0.0

        except Exception as e:
            self.logger.warning(f"Erreur calcul pourcentage √©cart Plan Adressage: {e}")
            return 0.0

    def _display_modern_results(self, results: Dict[str, Any]):
        """Affiche les r√©sultats de l'analyse avec un design moderne."""
        try:
            # Effacer les r√©sultats pr√©c√©dents
            for widget in self.results_frame.winfo_children():
                widget.destroy()

            summary = results.get('summary', {})
            critere_0 = results.get('critere_0', {})
            critere_1 = results.get('critere_1', {})

            total_errors = summary.get('total_errors', 0)

            # Carte de r√©sum√© principal
            self._create_summary_card(summary, total_errors)

            # Cartes de d√©tails par crit√®re
            critere_2 = results.get('critere_2', {})
            critere_3 = results.get('critere_3', {})
            critere_4 = results.get('critere_4', {})
            self._create_criteria_results_cards(critere_0, critere_2, critere_3, critere_4)

            # Informations de contexte
            self._create_context_info_card(summary)

        except Exception as e:
            self.logger.error(f"Erreur affichage r√©sultats modernes: {e}")

    def _display_compact_results(self, results: Dict[str, Any]):
        """Affiche les r√©sultats de l'analyse de mani√®re ultra-compacte."""
        try:
            # Effacer les r√©sultats pr√©c√©dents
            for widget in self.results_frame.winfo_children():
                widget.destroy()

            summary = results.get('summary', {})
            critere_0 = results.get('critere_0', {})
            critere_2 = results.get('critere_2', {})
            critere_3 = results.get('critere_3', {})

            total_errors = summary.get('total_errors', 0)

            # Statut principal ultra-compact
            status_frame = tk.Frame(self.results_frame, bg=COLORS['CARD'])
            status_frame.pack(fill=tk.X, pady=(0, 3))

            status_icon = "‚úÖ" if total_errors == 0 else "‚ö†Ô∏è" if total_errors < 5 else "‚ùå"
            status_color = COLORS['SUCCESS'] if total_errors == 0 else COLORS['WARNING'] if total_errors < 5 else COLORS['ERROR']

            tk.Label(status_frame, text=f"{status_icon} {total_errors} erreur(s)",
                    font=("Segoe UI", 9, "bold"), fg=status_color,
                    bg=COLORS['CARD']).pack()

            # D√©tails par crit√®re ultra-compacts
            details_frame = tk.Frame(self.results_frame, bg=COLORS['LIGHT'], relief='flat', bd=1)
            details_frame.pack(fill=tk.X, pady=2)
            details_frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

            details_content = tk.Frame(details_frame, bg=COLORS['LIGHT'])
            details_content.pack(fill=tk.X, padx=3, pady=2)

            # Crit√®re 0
            c0_errors = critere_0.get('total_incoherences', 0)
            c0_color = COLORS['SUCCESS'] if c0_errors == 0 else COLORS['ERROR']
            c0_frame = tk.Frame(details_content, bg=COLORS['LIGHT'])
            c0_frame.pack(fill=tk.X, pady=1)

            tk.Label(c0_frame, text="0", font=("Segoe UI", 7, "bold"),
                    fg='white', bg=c0_color, padx=2).pack(side=tk.LEFT)
            tk.Label(c0_frame, text=f"Incoh√©rences: {c0_errors}",
                    font=("Segoe UI", 7), fg=COLORS['TEXT_PRIMARY'],
                    bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(3, 0))

            # Crit√®re 2
            c2_errors = critere_2.get('total_errors', 0)
            c2_color = COLORS['SUCCESS'] if c2_errors == 0 else COLORS['ERROR']
            c2_frame = tk.Frame(details_content, bg=COLORS['LIGHT'])
            c2_frame.pack(fill=tk.X, pady=1)

            tk.Label(c2_frame, text="2", font=("Segoe UI", 7, "bold"),
                    fg='white', bg=c2_color, padx=2).pack(side=tk.LEFT)
            tk.Label(c2_frame, text=f"Tickets: {c2_errors}",
                    font=("Segoe UI", 7), fg=COLORS['TEXT_PRIMARY'],
                    bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(3, 0))

            # Crit√®re 3
            c3_errors = critere_3.get('total_erreurs_detectees', 0)
            c3_doublons = critere_3.get('total_doublons_suspects', 0)
            c3_motif_ok = critere_3.get('total_erreurs_motif_ok', 0)
            c3_color = COLORS['SUCCESS'] if c3_errors == 0 else COLORS['ERROR']
            c3_frame = tk.Frame(details_content, bg=COLORS['LIGHT'])
            c3_frame.pack(fill=tk.X, pady=1)

            tk.Label(c3_frame, text="3", font=("Segoe UI", 7, "bold"),
                    fg='white', bg=c3_color, padx=2).pack(side=tk.LEFT)
            tk.Label(c3_frame, text=f"IMB: {c3_doublons}+{c3_motif_ok}={c3_errors}",
                    font=("Segoe UI", 7), fg=COLORS['TEXT_PRIMARY'],
                    bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(3, 0))

            # Crit√®re 4
            critere_4 = results.get('critere_4', {})
            c4_errors = critere_4.get('total_ad_a_analyser', 0)
            c4_color = COLORS['SUCCESS'] if c4_errors == 0 else COLORS['ERROR']
            c4_frame = tk.Frame(details_content, bg=COLORS['LIGHT'])
            c4_frame.pack(fill=tk.X, pady=1)

            tk.Label(c4_frame, text="4", font=("Segoe UI", 7, "bold"),
                    fg='white', bg=c4_color, padx=2).pack(side=tk.LEFT)
            tk.Label(c4_frame, text=f"AD √† analyser: {c4_errors}",
                    font=("Segoe UI", 7), fg=COLORS['TEXT_PRIMARY'],
                    bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(3, 0))

            # Informations contextuelles ultra-compactes
            context_frame = tk.Frame(self.results_frame, bg=COLORS['CARD'])
            context_frame.pack(fill=tk.BOTH, expand=True, pady=(3, 0))

            context_text = f"üìÖ {summary.get('analysis_date', 'N/A')[:16]}\n"
            context_text += f"üìä Taux erreur: {self._calculate_error_percentage():.1f}%\n"
            context_text += f"üìÑ Rapport: 3 feuilles vides pr√™tes"

            tk.Label(context_frame, text=context_text, font=("Segoe UI", 7),
                    fg=COLORS['TEXT_SECONDARY'], bg=COLORS['CARD'],
                    justify=tk.LEFT).pack(expand=True)

        except Exception as e:
            self.logger.error(f"Erreur affichage r√©sultats compacts: {e}")
            # Fallback simple
            tk.Label(self.results_frame, text="‚ùå Erreur affichage",
                    font=("Segoe UI", 8), fg=COLORS['ERROR'],
                    bg=COLORS['CARD']).pack(expand=True)

    def _create_summary_card(self, summary: Dict[str, Any], total_errors: int):
        """Cr√©e la carte de r√©sum√© principal."""
        from ui.styles import create_card_frame

        summary_card = create_card_frame(self.results_frame, shadow=True)
        summary_card.pack(fill=tk.X, pady=(0, 10))

        card_content = summary_card.winfo_children()[0] if summary_card.winfo_children() else summary_card
        content_frame = tk.Frame(card_content, bg=COLORS['CARD'])
        content_frame.pack(fill=tk.X, padx=20, pady=15)

        # En-t√™te avec statut
        header_frame = tk.Frame(content_frame, bg=COLORS['CARD'])
        header_frame.pack(fill=tk.X, pady=(0, 10))

        status_icon = "‚úÖ" if total_errors == 0 else "‚ö†Ô∏è" if total_errors < 5 else "‚ùå"
        status_color = COLORS['SUCCESS'] if total_errors == 0 else COLORS['WARNING'] if total_errors < 5 else COLORS['ERROR']

        tk.Label(
            header_frame,
            text=status_icon,
            font=("Segoe UI", 20),
            fg=status_color,
            bg=COLORS['CARD']
        ).pack(side=tk.LEFT)

        tk.Label(
            header_frame,
            text=f"Analyse Termin√©e - {total_errors} erreur(s) d√©tect√©e(s)",
            font=UIConfig.FONT_CARD_TITLE,
            fg=status_color,
            bg=COLORS['CARD']
        ).pack(side=tk.LEFT, padx=(10, 0))

        # M√©triques
        metrics_frame = tk.Frame(content_frame, bg=COLORS['CARD'])
        metrics_frame.pack(fill=tk.X)
        metrics_frame.grid_columnconfigure(0, weight=1)
        metrics_frame.grid_columnconfigure(1, weight=1)

        # Pourcentage d'erreur
        error_percentage = self._calculate_error_percentage()
        self._create_metric_display(metrics_frame, 0, 0, "üìä", "Taux d'erreur", f"{error_percentage:.1f}%")

        # Date d'analyse
        analysis_date = summary.get('analysis_date', 'N/A')
        self._create_metric_display(metrics_frame, 0, 1, "üìÖ", "Date d'analyse", analysis_date)

    def _create_metric_display(self, parent: tk.Widget, row: int, col: int,
                              icon: str, label: str, value: str):
        """Cr√©e un affichage de m√©trique."""
        metric_frame = tk.Frame(parent, bg=COLORS['LIGHT'], relief='flat', bd=1)
        metric_frame.grid(row=row, column=col, sticky="ew", padx=5, pady=5)
        metric_frame.config(highlightbackground=COLORS['BORDER'], highlightthickness=1)

        content = tk.Frame(metric_frame, bg=COLORS['LIGHT'])
        content.pack(fill=tk.X, padx=10, pady=8)

        # Ic√¥ne et label
        header = tk.Frame(content, bg=COLORS['LIGHT'])
        header.pack(fill=tk.X)

        tk.Label(header, text=icon, font=("Segoe UI", 12),
                fg=COLORS['SECONDARY'], bg=COLORS['LIGHT']).pack(side=tk.LEFT)

        tk.Label(header, text=label, font=UIConfig.FONT_SMALL,
                fg=COLORS['TEXT_SECONDARY'], bg=COLORS['LIGHT']).pack(side=tk.LEFT, padx=(5, 0))

        # Valeur
        tk.Label(content, text=value, font=UIConfig.FONT_SUBTITLE,
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['LIGHT']).pack(anchor=tk.W, pady=(3, 0))

    def _create_criteria_results_cards(self, critere_0: Dict[str, Any], critere_2: Dict[str, Any], critere_3: Dict[str, Any], critere_4: Dict[str, Any]):
        """Cr√©e les cartes de r√©sultats par crit√®re."""
        from ui.styles import create_card_frame

        # Conteneur pour les cartes de crit√®res
        criteria_container = tk.Frame(self.results_frame, bg=COLORS['CARD'])
        criteria_container.pack(fill=tk.X, pady=(0, 10))
        criteria_container.grid_columnconfigure(0, weight=1)
        criteria_container.grid_columnconfigure(1, weight=1)
        criteria_container.grid_columnconfigure(2, weight=1)
        criteria_container.grid_columnconfigure(3, weight=1)

        # Carte Crit√®re 0 - √âcart Plan Adressage
        self._create_single_criteria_card(criteria_container, 0, 0, "0", "√âcart Plan Adressage",
                                         critere_0.get('total_incoherences', 0),
                                         critere_0.get('incoherences', []))

        # Carte Crit√®re 2 - Oubli Tickets
        self._create_single_criteria_card(criteria_container, 0, 1, "2", "Oubli Tickets",
                                         critere_2.get('total_errors', 0),
                                         critere_2.get('errors', []))

        # Carte Crit√®re 3 - Contr√¥le IMB
        total_c3_errors = critere_3.get('total_erreurs_detectees', 0)
        all_c3_details = critere_3.get('doublons_details', [])
        self._create_single_criteria_card(criteria_container, 0, 2, "3", "Contr√¥le IMB",
                                         total_c3_errors, all_c3_details)

        # Carte Crit√®re 4 - AD √† Analyser
        total_c4_errors = critere_4.get('total_ad_a_analyser', 0)
        all_c4_details = critere_4.get('ad_a_analyser_entries', [])
        self._create_single_criteria_card(criteria_container, 0, 3, "4", "AD √† Analyser",
                                         total_c4_errors, all_c4_details)

    def _create_single_criteria_card(self, parent: tk.Widget, row: int, col: int,
                                    number: str, title: str, count: int, details: list):
        """Cr√©e une carte pour un crit√®re sp√©cifique."""
        from ui.styles import create_card_frame

        card = create_card_frame(parent, shadow=True)
        card.grid(row=row, column=col, sticky="nsew", padx=5, pady=5)

        card_content = card.winfo_children()[0] if card.winfo_children() else card
        content_frame = tk.Frame(card_content, bg=COLORS['CARD'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=12)

        # En-t√™te
        header_frame = tk.Frame(content_frame, bg=COLORS['CARD'])
        header_frame.pack(fill=tk.X, pady=(0, 8))

        # Badge
        badge_color = COLORS['SUCCESS'] if count == 0 else COLORS['WARNING'] if count < 3 else COLORS['ERROR']
        badge = tk.Label(
            header_frame,
            text=f"CRIT√àRE {number}",
            font=("Segoe UI", 8, "bold"),
            fg='white',
            bg=badge_color,
            padx=6,
            pady=2
        )
        badge.pack(side=tk.LEFT)

        # Titre
        tk.Label(
            header_frame,
            text=title,
            font=UIConfig.FONT_SUBTITLE,
            fg=COLORS['TEXT_PRIMARY'],
            bg=COLORS['CARD']
        ).pack(side=tk.LEFT, padx=(8, 0))

        # Compteur
        count_color = COLORS['SUCCESS'] if count == 0 else COLORS['ERROR']
        tk.Label(
            content_frame,
            text=f"{count} erreur(s) d√©tect√©e(s)",
            font=UIConfig.FONT_CARD_SUBTITLE,
            fg=count_color,
            bg=COLORS['CARD']
        ).pack(anchor=tk.W, pady=(0, 5))

        # D√©tails sp√©cifiques pour le Crit√®re 0 (√âcart Plan Adressage)
        if number == "0" and details and count > 0:
            # Afficher les √©carts d√©tect√©s
            ecarts_text = "√âcarts d√©tect√©s:\n"
            for detail in details[:3]:  # Limiter √† 3 exemples
                motif = detail.get('motif', 'N/A')
                suivi = detail.get('suivi_count', 0)
                qgis = detail.get('qgis_count', 0)
                diff = detail.get('difference', 0)
                ecarts_text += f"‚Ä¢ {motif}: {suivi} vs {qgis} ({diff:+d})\n"

            if len(details) > 3:
                ecarts_text += f"... et {len(details) - 3} autre(s) √©cart(s)"

            details_label = tk.Label(
                content_frame,
                text=ecarts_text.strip(),
                font=UIConfig.FONT_SMALL,
                fg=COLORS['TEXT_SECONDARY'],
                bg=COLORS['CARD'],
                justify=tk.LEFT
            )
            details_label.pack(anchor=tk.W, pady=(5, 0))

        # D√©tails sp√©cifiques pour le Crit√®re 2 (Oubli Tickets)
        elif number == "2":
            # R√©cup√©rer les statuts des tickets depuis les r√©sultats
            if hasattr(self, 'qc_results') and self.qc_results and 'critere_2' in self.qc_results:
                critere_2 = self.qc_results['critere_2']
                ticket_upr_status = critere_2.get('ticket_upr_status', 'N/A')
                ticket_501_511_status = critere_2.get('ticket_501_511_status', 'N/A')

                # Afficher les statuts des tickets
                tickets_text = f"Statuts des tickets:\n"
                tickets_text += f"‚Ä¢ Ticket UPR: {ticket_upr_status}\n"
                tickets_text += f"‚Ä¢ Ticket 501/511: {ticket_501_511_status}"

                # Couleur selon les statuts
                status_color = COLORS['SUCCESS']
                if ticket_upr_status == 'NOK' or ticket_501_511_status == 'NOK':
                    status_color = COLORS['ERROR']
                elif ticket_upr_status == 'N/A' and ticket_501_511_status == 'N/A':
                    status_color = COLORS['TEXT_SECONDARY']

                tickets_label = tk.Label(
                    content_frame,
                    text=tickets_text,
                    font=UIConfig.FONT_SMALL,
                    fg=status_color,
                    bg=COLORS['CARD'],
                    justify=tk.LEFT
                )
                tickets_label.pack(anchor=tk.W, pady=(5, 0))

                # Afficher les erreurs d√©tect√©es si pr√©sentes
                if details and count > 0:
                    errors_text = "\nErreurs d√©tect√©es:\n"
                    for detail in details[:2]:  # Limiter √† 2 exemples
                        error_type = detail.get('type', 'N/A')
                        description = detail.get('description', 'N/A')
                        if error_type == 'TICKET_UPR_MANQUANT':
                            errors_text += "‚Ä¢ Ticket UPR manquant\n"
                        elif error_type == 'TICKET_501_511_MANQUANT':
                            errors_text += "‚Ä¢ Ticket 501/511 manquant\n"

                    if len(details) > 2:
                        errors_text += f"... et {len(details) - 2} autre(s) erreur(s)"

                    errors_label = tk.Label(
                        content_frame,
                        text=errors_text.strip(),
                        font=UIConfig.FONT_SMALL,
                        fg=COLORS['ERROR'],
                        bg=COLORS['CARD'],
                        justify=tk.LEFT
                    )
                    errors_label.pack(anchor=tk.W, pady=(2, 0))

        # D√©tails g√©n√©riques pour les autres crit√®res
        elif details and count > 0:
            details_text = f"Exemples: {len(details[:3])} √©l√©ment(s) affich√©s"
            if len(details) > 3:
                details_text += f" (+ {len(details) - 3} autres)"

            tk.Label(
                content_frame,
                text=details_text,
                font=UIConfig.FONT_SMALL,
                fg=COLORS['TEXT_SECONDARY'],
                bg=COLORS['CARD']
            ).pack(anchor=tk.W)

    def _create_context_info_card(self, summary: Dict[str, Any]):
        """Cr√©e la carte d'informations de contexte."""
        from ui.styles import create_card_frame

        context_card = create_card_frame(self.results_frame, shadow=True)
        context_card.pack(fill=tk.X)

        card_content = context_card.winfo_children()[0] if context_card.winfo_children() else context_card
        content_frame = tk.Frame(card_content, bg=COLORS['CARD'])
        content_frame.pack(fill=tk.X, padx=20, pady=15)

        # Titre
        tk.Label(
            content_frame,
            text="üìã Informations de Contexte",
            font=UIConfig.FONT_CARD_TITLE,
            fg=COLORS['PRIMARY'],
            bg=COLORS['CARD']
        ).pack(anchor=tk.W, pady=(0, 10))

        # Grille d'informations
        info_grid = tk.Frame(content_frame, bg=COLORS['CARD'])
        info_grid.pack(fill=tk.X)
        info_grid.grid_columnconfigure(0, weight=1)
        info_grid.grid_columnconfigure(1, weight=1)

        # Informations
        self._create_context_item(info_grid, 0, 0, "üèòÔ∏è", "Commune", summary.get('commune', 'N/A'))
        self._create_context_item(info_grid, 0, 1, "üë§", "Collaborateur", summary.get('collaborateur', 'N/A'))
        self._create_context_item(info_grid, 1, 0, "üèõÔ∏è", "Code INSEE", summary.get('insee', 'N/A'))
        self._create_context_item(info_grid, 1, 1, "üÜî", "ID T√¢che", summary.get('id_tache', 'N/A'))

    def _create_context_item(self, parent: tk.Widget, row: int, col: int,
                            icon: str, label: str, value: str):
        """Cr√©e un √©l√©ment d'information de contexte."""
        item_frame = tk.Frame(parent, bg=COLORS['CARD'])
        item_frame.grid(row=row, column=col, sticky="w", padx=10, pady=3)

        # Ic√¥ne et label
        header = tk.Frame(item_frame, bg=COLORS['CARD'])
        header.pack(anchor=tk.W)

        tk.Label(header, text=icon, font=("Segoe UI", 10),
                fg=COLORS['SECONDARY'], bg=COLORS['CARD']).pack(side=tk.LEFT)

        tk.Label(header, text=f"{label}:", font=UIConfig.FONT_SMALL,
                fg=COLORS['TEXT_SECONDARY'], bg=COLORS['CARD']).pack(side=tk.LEFT, padx=(3, 0))

        # Valeur
        tk.Label(item_frame, text=value, font=UIConfig.FONT_SUBTITLE,
                fg=COLORS['TEXT_PRIMARY'], bg=COLORS['CARD']).pack(anchor=tk.W, pady=(2, 0))

    def show(self):
        """Affiche le module."""
        if self.main_frame:
            self.main_frame.grid(row=0, column=0, sticky="nsew")

    def hide(self):
        """Cache le module."""
        if self.main_frame:
            self.main_frame.grid_forget()
