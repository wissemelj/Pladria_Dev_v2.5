#!/usr/bin/env python3
"""
Test script to verify "pres stats" folder detection and analysis.
"""

import sys
import os
import tempfile
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def create_test_pres_stats_environment():
    """Create a test environment with 'pres stats' folder and files."""
    print("üîß Creating test 'pres stats' environment...")
    
    # Create temporary directory structure
    temp_dir = tempfile.mkdtemp()
    print(f"‚úÖ Created temp directory: {temp_dir}")
    
    # Create 'pres stats' folder (with space)
    pres_stats_dir = os.path.join(temp_dir, 'pres stats')
    os.makedirs(pres_stats_dir)
    print(f"‚úÖ Created 'pres stats' directory: {pres_stats_dir}")
    
    # Create test files in pres stats folder
    test_files = {
        'index.html': """<!DOCTYPE html>
<html>
<head>
    <title>Pres Stats Dashboard</title>
    <meta charset="utf-8">
</head>
<body>
    <h1>üìä Presentation Statistics Dashboard</h1>
    <div id="main-content">
        <p>This is the main dashboard for presentation statistics.</p>
        
        <!-- stats -->
        <div id="stats-section">
            <h2>Current Statistics</h2>
            <p>Statistics will be displayed here...</p>
        </div>
        <!-- end stats -->
        
    </div>
    
    <footer>
        <p>Generated by Pladria System</p>
    </footer>
</body>
</html>""",
        
        'dashboard.xlsx': 'fake excel content for testing',
        
        'rapport.html': """<!DOCTYPE html>
<html>
<head><title>Rapport</title></head>
<body>
    <h1>Rapport de Statistiques</h1>
    <!-- PLADRIA_STATS_INJECTION -->
    <p>Existing Pladria injection point found!</p>
    <!-- END_PLADRIA_STATS -->
</body>
</html>""",
        
        'other_file.txt': 'This is just a text file for testing'
    }
    
    for filename, content in test_files.items():
        file_path = os.path.join(pres_stats_dir, filename)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Created test file: {filename}")
    
    # Create fake main data file
    main_data_path = os.path.join(temp_dir, 'test_data.xlsx')
    with open(main_data_path, 'w') as f:
        f.write("fake excel content")
    
    print(f"‚úÖ Created fake main data file: {main_data_path}")
    
    return temp_dir, pres_stats_dir, main_data_path, test_files

def test_folder_detection():
    """Test the folder detection with 'pres stats' name."""
    print("\nüîç Testing 'pres stats' folder detection...")
    
    try:
        from ui.modules.team_stats_module import TeamStatsModule
        
        # Create test environment
        temp_dir, pres_stats_dir, main_data_path, test_files = create_test_pres_stats_environment()
        
        # Test the folder detection logic directly
        base_dir = os.path.dirname(main_data_path)
        possible_folders = ['pres stats', 'stats', 'Stats', 'STATS']
        
        found_folder = None
        for folder_name in possible_folders:
            test_folder = os.path.join(base_dir, folder_name)
            if os.path.exists(test_folder) and os.path.isdir(test_folder):
                found_folder = test_folder
                print(f"‚úÖ Found folder: {folder_name} at {test_folder}")
                break
        
        if found_folder:
            print(f"‚úÖ Folder detection successful")
            print(f"   Expected: {pres_stats_dir}")
            print(f"   Found: {found_folder}")
            print(f"   Match: {found_folder == pres_stats_dir}")
            
            # List files in found folder
            files_found = os.listdir(found_folder)
            print(f"‚úÖ Files in folder: {files_found}")
            
            return True
        else:
            print("‚ùå No folder found")
            return False
            
    except Exception as e:
        print(f"‚ùå Error in folder detection test: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        # Cleanup
        import shutil
        shutil.rmtree(temp_dir)
        print(f"üßπ Cleaned up temp directory: {temp_dir}")

def test_file_analysis():
    """Test the file analysis functionality."""
    print("\nüìä Testing file analysis...")
    
    try:
        # Create test environment
        temp_dir, pres_stats_dir, main_data_path, test_files = create_test_pres_stats_environment()
        
        # Simulate the analysis logic
        analysis = {
            'folder_path': pres_stats_dir,
            'folder_name': os.path.basename(pres_stats_dir),
            'files': [],
            'html_files': [],
            'excel_files': [],
            'other_files': [],
            'total_files': 0,
            'potential_index_files': []
        }
        
        # Analyze files
        for file in os.listdir(pres_stats_dir):
            file_path = os.path.join(pres_stats_dir, file)
            file_size = os.path.getsize(file_path)
            
            file_info = {
                'name': file,
                'path': file_path,
                'size': file_size,
                'extension': os.path.splitext(file)[1].lower()
            }
            
            analysis['files'].append(file_info)
            analysis['total_files'] += 1
            
            # Categorize files
            ext = file_info['extension']
            if ext in ['.html', '.htm']:
                analysis['html_files'].append(file_info)
                if any(keyword in file.lower() for keyword in ['index', 'main', 'dashboard', 'home']):
                    analysis['potential_index_files'].append(file_info)
            elif ext in ['.xlsx', '.xls']:
                analysis['excel_files'].append(file_info)
                if any(keyword in file.lower() for keyword in ['index', 'main', 'dashboard', 'stats']):
                    analysis['potential_index_files'].append(file_info)
            else:
                analysis['other_files'].append(file_info)
        
        # Print analysis results
        print(f"‚úÖ Analysis Results:")
        print(f"   Folder: {analysis['folder_name']}")
        print(f"   Total files: {analysis['total_files']}")
        print(f"   HTML files: {len(analysis['html_files'])}")
        print(f"   Excel files: {len(analysis['excel_files'])}")
        print(f"   Other files: {len(analysis['other_files'])}")
        print(f"   Potential index files: {len(analysis['potential_index_files'])}")
        
        # List potential index files
        for file_info in analysis['potential_index_files']:
            print(f"     - {file_info['name']} ({file_info['extension']})")
        
        # Test HTML structure analysis
        for html_file in analysis['html_files']:
            print(f"\nüîç Analyzing HTML file: {html_file['name']}")
            
            with open(html_file['path'], 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Check for injection points
            injection_points = []
            if '<!-- PLADRIA_STATS_INJECTION -->' in content:
                injection_points.append('existing_pladria_marker')
            if '<!-- stats -->' in content.lower():
                injection_points.append('stats_comment')
            if '<body' in content.lower():
                injection_points.append('before_body_close')
            
            print(f"     Injection points found: {injection_points}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error in file analysis test: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        # Cleanup
        import shutil
        shutil.rmtree(temp_dir)

def test_injection_strategies():
    """Test different injection strategies."""
    print("\nüíâ Testing injection strategies...")
    
    try:
        # Create test environment
        temp_dir, pres_stats_dir, main_data_path, test_files = create_test_pres_stats_environment()
        
        # Test HTML injection on index.html
        index_path = os.path.join(pres_stats_dir, 'index.html')
        
        with open(index_path, 'r', encoding='utf-8') as f:
            original_content = f.read()
        
        print(f"‚úÖ Original content length: {len(original_content)} chars")
        
        # Test injection before </body>
        test_stats_html = """
<div style="background-color: #f0f0f0; padding: 10px; margin: 10px 0;">
    <h2>üß™ TEST PLADRIA STATISTICS</h2>
    <p>This is a test injection for 'pres stats' folder.</p>
    <ul>
        <li>Period: 2024-01-01 to 2024-01-15</li>
        <li>Total records: 150</li>
        <li>Top motif: Test Motif (60%)</li>
    </ul>
</div>
"""
        
        if '</body>' in original_content.lower():
            body_close_idx = original_content.lower().rfind('</body>')
            if body_close_idx != -1:
                new_content = (original_content[:body_close_idx] + 
                             '\n<!-- PLADRIA_STATS_INJECTION -->\n' + test_stats_html + '\n<!-- END_PLADRIA_STATS -->\n' +
                             original_content[body_close_idx:])
                
                # Write updated content
                with open(index_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                print(f"‚úÖ Injection successful, new content length: {len(new_content)} chars")
                
                # Verify injection
                with open(index_path, 'r', encoding='utf-8') as f:
                    verify_content = f.read()
                
                if "TEST PLADRIA STATISTICS" in verify_content:
                    print("‚úÖ Injection verified in file")
                    return True
                else:
                    print("‚ùå Injection not found in file")
                    return False
        
        return False
        
    except Exception as e:
        print(f"‚ùå Error in injection strategies test: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        # Cleanup
        import shutil
        shutil.rmtree(temp_dir)

def main():
    """Main test function."""
    print("üöÄ Testing 'Pres Stats' Folder Detection and Analysis")
    print("=" * 70)
    
    tests_passed = 0
    total_tests = 3
    
    # Test 1: Folder detection
    if test_folder_detection():
        tests_passed += 1
        print("\n‚úÖ Test 1 PASSED: Folder detection")
    else:
        print("\n‚ùå Test 1 FAILED: Folder detection")
    
    # Test 2: File analysis
    if test_file_analysis():
        tests_passed += 1
        print("\n‚úÖ Test 2 PASSED: File analysis")
    else:
        print("\n‚ùå Test 2 FAILED: File analysis")
    
    # Test 3: Injection strategies
    if test_injection_strategies():
        tests_passed += 1
        print("\n‚úÖ Test 3 PASSED: Injection strategies")
    else:
        print("\n‚ùå Test 3 FAILED: Injection strategies")
    
    # Summary
    print("\n" + "=" * 70)
    print(f"üìä Test Results: {tests_passed}/{total_tests} tests passed")
    
    if tests_passed == total_tests:
        print("üéâ ALL TESTS PASSED!")
        print("\n‚úÖ 'Pres stats' folder detection is working correctly:")
        print("  ‚Ä¢ Correctly detects 'pres stats' folder (with space)")
        print("  ‚Ä¢ Falls back to 'stats' if 'pres stats' not found")
        print("  ‚Ä¢ Analyzes folder contents and identifies index files")
        print("  ‚Ä¢ Supports multiple injection strategies for HTML files")
        print("  ‚Ä¢ Handles Excel files for statistics injection")
        
        print("\nüéØ The workflow should now work with the actual folder structure!")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - tests_passed} test(s) failed.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
