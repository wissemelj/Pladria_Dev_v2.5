#!/usr/bin/env python3
"""
Test de l'impl√©mentation du graphique RIP (P0 P1) comme la section CM.
"""

import sys
import os
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def test_rip_html_chart_structure():
    """Test que le HTML contient le graphique RIP."""
    print("üîç Test de la Structure HTML du Graphique RIP")
    print("=" * 60)
    
    try:
        html_file = Path(__file__).parent / "src" / "pres stats" / "index.html"
        
        if not html_file.exists():
            print(f"   ‚ùå Fichier HTML non trouv√©")
            return False
        
        with open(html_file, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # V√©rifier les √©l√©ments du graphique RIP
        rip_chart_elements = [
            'RIP (P0 P1) (0)',  # Titre avec total
            'ripChart',         # ID du canvas
            'chart-container',  # Container du graphique
            'stat-item',        # Items de stats (pas summary-item)
            'stat-value rip-rien',
            'stat-value rip-modification', 
            'stat-value rip-creation'
        ]
        
        for element in rip_chart_elements:
            if element in html_content:
                print(f"   ‚úÖ √âl√©ment graphique RIP trouv√©: {element}")
            else:
                print(f"   ‚ùå √âl√©ment graphique RIP manquant: {element}")
                return False
        
        # V√©rifier qu'il n'y a plus de rip-total (supprim√© car pas dans les graphiques)
        if 'rip-total' not in html_content:
            print(f"   ‚úÖ rip-total correctement supprim√© (pas n√©cessaire avec graphique)")
        else:
            print(f"   ‚ö†Ô∏è rip-total encore pr√©sent (peut √™tre OK)")
        
        # V√©rifier la structure comme CM
        if 'canvas id="ripChart"' in html_content:
            print(f"   ‚úÖ Canvas RIP correctement configur√©")
        else:
            print(f"   ‚ùå Canvas RIP manquant")
            return False
        
        print(f"   ‚úÖ Structure HTML du graphique RIP correcte")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification HTML: {e}")
        return False

def test_rip_script_chart_code():
    """Test que le script.js contient le code du graphique RIP."""
    print("\nüîç Test du Code JavaScript du Graphique RIP")
    print("=" * 60)
    
    try:
        script_file = Path(__file__).parent / "src" / "pres stats" / "script.js"
        
        if not script_file.exists():
            print(f"   ‚ùå Fichier script.js non trouv√©")
            return False
        
        with open(script_file, 'r', encoding='utf-8') as f:
            script_content = f.read()
        
        # V√©rifier les √©l√©ments du graphique RIP
        rip_script_elements = [
            'ripCtx',
            'ripChart',
            'getElementById(\'ripChart\')',
            'type: \'doughnut\'',
            'Rien √† faire',
            'Modification', 
            'Cr√©ation',
            'colors.ripRien',
            'colors.ripModification',
            'colors.ripCreation'
        ]
        
        for element in rip_script_elements:
            if element in script_content:
                print(f"   ‚úÖ Code JavaScript RIP trouv√©: {element}")
            else:
                print(f"   ‚ùå Code JavaScript RIP manquant: {element}")
                return False
        
        # V√©rifier les couleurs RIP
        rip_colors = ['ripRien', 'ripModification', 'ripCreation']
        for color in rip_colors:
            if color in script_content:
                print(f"   ‚úÖ Couleur RIP d√©finie: {color}")
            else:
                print(f"   ‚ùå Couleur RIP manquante: {color}")
                return False
        
        # V√©rifier que c'est un graphique doughnut comme CM
        if 'type: \'doughnut\'' in script_content and 'ripCtx' in script_content:
            print(f"   ‚úÖ Graphique RIP configur√© en doughnut comme CM")
        else:
            print(f"   ‚ùå Configuration graphique RIP incorrecte")
            return False
        
        print(f"   ‚úÖ Code JavaScript du graphique RIP correct")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification script.js: {e}")
        return False

def test_rip_html_update_patterns():
    """Test que les patterns de mise √† jour HTML sont corrects pour le graphique."""
    print("\nüîç Test des Patterns de Mise √† Jour HTML RIP")
    print("=" * 60)
    
    try:
        # Simuler le HTML avec graphique RIP
        test_html = '''
        <div class="card third-width">
            <h2>RIP (P0 P1) (0)</h2>
            <div class="chart-container">
                <canvas id="ripChart"></canvas>
            </div>
            <div class="stats-summary">
                <div class="stat-item">
                    <span class="stat-value rip-rien">0</span>
                    <span class="stat-label">Rien √† faire</span>
                </div>
                <div class="stat-item">
                    <span class="stat-value rip-modification">0</span>
                    <span class="stat-label">Modification</span>
                </div>
                <div class="stat-item">
                    <span class="stat-value rip-creation">0</span>
                    <span class="stat-label">Cr√©ation</span>
                </div>
            </div>
        </div>
        '''
        
        import re
        
        # Test des patterns RIP avec graphique
        patterns = [
            ('RIP Title', r'(<h2>RIP \(P0 P1\)\s*\()[^)]*(\)</h2>)'),
            ('RIP Rien', r'(<span class="stat-value rip-rien">)[^<]*(</span>)'),
            ('RIP Modification', r'(<span class="stat-value rip-modification">)[^<]*(</span>)'),
            ('RIP Cr√©ation', r'(<span class="stat-value rip-creation">)[^<]*(</span>)')
        ]
        
        for nom, pattern in patterns:
            match = re.search(pattern, test_html)
            if match:
                print(f"   ‚úÖ Pattern {nom} fonctionne: {match.group(0)}")
            else:
                print(f"   ‚ùå Pattern {nom} √©choue")
                return False
        
        print(f"   ‚úÖ Tous les patterns de mise √† jour RIP fonctionnent")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test des patterns: {e}")
        return False

def test_rip_chart_integration():
    """Test que l'int√©gration du graphique RIP est compl√®te."""
    print("\nüîç Test de l'Int√©gration Compl√®te du Graphique RIP")
    print("=" * 60)
    
    try:
        # V√©rifier que les m√©thodes d'extraction existent toujours
        from ui.modules.team_stats_module import TeamStatsModule
        
        required_methods = [
            '_extract_rip_data_for_dashboard',
            '_normalize_rip_motif'
        ]
        
        for method_name in required_methods:
            if hasattr(TeamStatsModule, method_name):
                print(f"   ‚úÖ M√©thode RIP existe: {method_name}")
            else:
                print(f"   ‚ùå M√©thode RIP manquante: {method_name}")
                return False
        
        # V√©rifier que la validation existe
        from core.data_validator import DataValidator
        
        validator = DataValidator()
        if hasattr(validator, '_validate_rip_data'):
            print(f"   ‚úÖ Validation RIP existe: _validate_rip_data")
        else:
            print(f"   ‚ùå Validation RIP manquante: _validate_rip_data")
            return False
        
        print(f"   ‚úÖ Int√©gration compl√®te du graphique RIP")
        print(f"   üìä Structure: Extraction ‚Üí Validation ‚Üí HTML+Chart ‚Üí Script.js")
        print(f"   üé® Style: Graphique doughnut comme CM avec 3 cat√©gories")
        print(f"   üîÑ Mise √† jour: Titre + valeurs individuelles + donn√©es graphique")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test d'int√©gration: {e}")
        return False

def main():
    """Fonction principale de test."""
    print("üöÄ Test du Graphique RIP (P0 P1) comme CM")
    print("=" * 80)
    
    tests_passed = 0
    total_tests = 4
    
    # Test 1: Structure HTML du graphique
    if test_rip_html_chart_structure():
        tests_passed += 1
        print("\n‚úÖ Test 1 R√âUSSI: Structure HTML du graphique RIP")
    else:
        print("\n‚ùå Test 1 √âCHOU√â: Structure HTML du graphique RIP")
    
    # Test 2: Code JavaScript du graphique
    if test_rip_script_chart_code():
        tests_passed += 1
        print("\n‚úÖ Test 2 R√âUSSI: Code JavaScript du graphique RIP")
    else:
        print("\n‚ùå Test 2 √âCHOU√â: Code JavaScript du graphique RIP")
    
    # Test 3: Patterns de mise √† jour HTML
    if test_rip_html_update_patterns():
        tests_passed += 1
        print("\n‚úÖ Test 3 R√âUSSI: Patterns de mise √† jour HTML RIP")
    else:
        print("\n‚ùå Test 3 √âCHOU√â: Patterns de mise √† jour HTML RIP")
    
    # Test 4: Int√©gration compl√®te
    if test_rip_chart_integration():
        tests_passed += 1
        print("\n‚úÖ Test 4 R√âUSSI: Int√©gration compl√®te du graphique RIP")
    else:
        print("\n‚ùå Test 4 √âCHOU√â: Int√©gration compl√®te du graphique RIP")
    
    # R√©sum√©
    print("\n" + "=" * 80)
    print(f"üìä R√©sultats: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("\n‚úÖ Graphique RIP (P0 P1) impl√©ment√© comme CM!")
        print("\nüéØ Changements effectu√©s:")
        print("  ‚Ä¢ ‚úÖ Graphique doughnut ajout√© √† la section RIP")
        print("  ‚Ä¢ ‚úÖ Canvas ripChart avec chart-container")
        print("  ‚Ä¢ ‚úÖ 3 couleurs d√©finies (bleu, orange, vert)")
        print("  ‚Ä¢ ‚úÖ Titre avec total comme CM: 'RIP (P0 P1) (0)'")
        print("  ‚Ä¢ ‚úÖ Stats individuelles sous le graphique")
        print("  ‚Ä¢ ‚úÖ Mise √† jour script.js pour donn√©es graphique")
        print("  ‚Ä¢ ‚úÖ Patterns HTML mis √† jour (stat-value)")
        
        print("\nüìä Structure finale:")
        print("  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("  ‚îÇ Tickets UPR ‚îÇ Tickets     ‚îÇ RIP (P0 P1) ‚îÇ")
        print("  ‚îÇ (bannettes) ‚îÇ 501/511     ‚îÇ (graphique) ‚îÇ")
        print("  ‚îÇ             ‚îÇ (bannettes) ‚îÇ             ‚îÇ")
        print("  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        print("\nüé® Graphique RIP:")
        print("  ‚Ä¢ Type: Doughnut (comme CM)")
        print("  ‚Ä¢ Cat√©gories: Rien √† faire, Modification, Cr√©ation")
        print("  ‚Ä¢ Couleurs: Bleu, Orange, Vert")
        print("  ‚Ä¢ L√©gende: En bas avec points")
        print("  ‚Ä¢ Tooltips: Avec pourcentages")
        
        print("\nüîß Pr√™t pour test avec donn√©es r√©elles!")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - tests_passed} test(s) √©chou√©(s).")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
