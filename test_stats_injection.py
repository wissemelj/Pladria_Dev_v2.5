#!/usr/bin/env python3
"""
Test script pour v√©rifier la fonctionnalit√© d'injection des statistiques dans l'index du dossier stats.
"""

import sys
import os
import tempfile
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def test_stats_injection_methods():
    """Test que les m√©thodes d'injection des statistiques existent."""
    print("üß™ Test des m√©thodes d'injection des statistiques")
    print("=" * 60)
    
    try:
        # Test imports
        print("üì¶ Test des imports...")
        from ui.modules.team_stats_module import TeamStatsModule
        print("‚úÖ TeamStatsModule import√© avec succ√®s")
        
        # Test que les nouvelles m√©thodes existent
        required_methods = [
            '_inject_statistics_to_stats_index',
            '_find_stats_index_file',
            '_prepare_statistics_for_injection',
            '_write_statistics_to_index',
            '_inject_to_html_index',
            '_inject_to_excel_index',
            '_generate_html_statistics'
        ]
        
        print("\nüîç V√©rification des m√©thodes requises...")
        missing_methods = []
        for method in required_methods:
            if not hasattr(TeamStatsModule, method):
                missing_methods.append(method)
            else:
                print(f"‚úÖ {method}")
        
        if missing_methods:
            print(f"\n‚ùå M√©thodes manquantes: {missing_methods}")
            return False
        
        print("\nüéâ Toutes les m√©thodes d'injection sont pr√©sentes!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_html_generation():
    """Test la g√©n√©ration de HTML pour les statistiques."""
    print("\nüåê Test de g√©n√©ration HTML")
    print("=" * 40)
    
    try:
        from ui.modules.team_stats_module import TeamStatsModule
        
        # Cr√©er des donn√©es de test
        test_stats_data = {
            'metadata': {
                'generated_at': '2024-01-15 10:30:00',
                'period_start': '2024-01-01',
                'period_end': '2024-01-15',
                'total_days': 15,
                'total_records': 100
            },
            'summary': {
                'total_records': 100,
                'unique_motifs': 5,
                'stats_files': 2
            },
            'top_motifs': [
                {'motif': 'Test Motif 1', 'count': 50, 'percentage': 50.0},
                {'motif': 'Test Motif 2', 'count': 30, 'percentage': 30.0}
            ],
            'collaborateurs': [
                {'name': 'Test User 1', 'count': 60, 'percentage': 60.0},
                {'name': 'Test User 2', 'count': 40, 'percentage': 40.0}
            ],
            'processing_times': {
                'average': 2.5,
                'median': 2.0,
                'min': 1.0,
                'max': 5.0
            },
            'daily_stats': [
                {'date': '2024-01-14', 'count': 10},
                {'date': '2024-01-15', 'count': 15}
            ]
        }
        
        # Cr√©er une instance temporaire pour tester
        import tkinter as tk
        root = tk.Tk()
        root.withdraw()
        
        try:
            # Cr√©er une instance de module (cela peut √©chouer √† cause du responsive manager)
            # mais nous pouvons tester la m√©thode directement
            html_content = TeamStatsModule._generate_html_statistics(None, test_stats_data)
            
            # V√©rifier que le HTML contient les √©l√©ments attendus
            expected_elements = [
                'Statistiques Pladria',
                'Test Motif 1',
                'Test User 1',
                '2024-01-01',
                '2024-01-15',
                'Temps de Traitement'
            ]
            
            missing_elements = []
            for element in expected_elements:
                if element not in html_content:
                    missing_elements.append(element)
                else:
                    print(f"‚úÖ √âl√©ment trouv√©: {element}")
            
            if missing_elements:
                print(f"\n‚ùå √âl√©ments manquants dans le HTML: {missing_elements}")
                return False
            
            print(f"\n‚úÖ HTML g√©n√©r√© avec succ√®s ({len(html_content)} caract√®res)")
            return True
            
        finally:
            root.destroy()
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test HTML: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_file_detection():
    """Test la d√©tection des fichiers index dans le dossier stats."""
    print("\nüìÅ Test de d√©tection des fichiers index")
    print("=" * 40)
    
    try:
        # Cr√©er un dossier temporaire avec des fichiers de test
        with tempfile.TemporaryDirectory() as temp_dir:
            # Cr√©er structure de test
            stats_dir = os.path.join(temp_dir, 'stats')
            os.makedirs(stats_dir)
            
            # Cr√©er des fichiers de test
            test_files = [
                'index.html',
                'dashboard.xlsx',
                'other_file.txt'
            ]
            
            for file_name in test_files:
                file_path = os.path.join(stats_dir, file_name)
                with open(file_path, 'w') as f:
                    f.write(f"Test content for {file_name}")
            
            print(f"‚úÖ Dossier de test cr√©√©: {stats_dir}")
            print(f"‚úÖ Fichiers cr√©√©s: {test_files}")
            
            # Test de d√©tection (simulation)
            expected_index_files = ['index.html', 'dashboard.xlsx']
            found_files = []
            
            for file_name in os.listdir(stats_dir):
                if file_name.lower().endswith(('.html', '.htm', '.xlsx', '.xls')):
                    found_files.append(file_name)
            
            print(f"‚úÖ Fichiers d√©tect√©s: {found_files}")
            
            # V√©rifier que les fichiers attendus sont trouv√©s
            for expected_file in expected_index_files:
                if expected_file in found_files:
                    print(f"‚úÖ Fichier index d√©tect√©: {expected_file}")
                else:
                    print(f"‚ùå Fichier index manqu√©: {expected_file}")
                    return False
            
            return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de d√©tection: {e}")
        return False

def main():
    """Fonction principale de test."""
    print("üöÄ Test de la fonctionnalit√© d'injection des statistiques")
    print("=" * 70)
    
    tests_passed = 0
    total_tests = 3
    
    # Test 1: M√©thodes d'injection
    if test_stats_injection_methods():
        tests_passed += 1
        print("\n‚úÖ Test 1 R√âUSSI: M√©thodes d'injection")
    else:
        print("\n‚ùå Test 1 √âCHOU√â: M√©thodes d'injection")
    
    # Test 2: G√©n√©ration HTML
    if test_html_generation():
        tests_passed += 1
        print("\n‚úÖ Test 2 R√âUSSI: G√©n√©ration HTML")
    else:
        print("\n‚ùå Test 2 √âCHOU√â: G√©n√©ration HTML")
    
    # Test 3: D√©tection de fichiers
    if test_file_detection():
        tests_passed += 1
        print("\n‚úÖ Test 3 R√âUSSI: D√©tection de fichiers")
    else:
        print("\n‚ùå Test 3 √âCHOU√â: D√©tection de fichiers")
    
    # R√©sum√©
    print("\n" + "=" * 70)
    print(f"üìä R√©sultats des tests: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("\nüìù Fonctionnalit√©s impl√©ment√©es:")
        print("  ‚úÖ Injection automatique des statistiques dans l'index du dossier stats")
        print("  ‚úÖ Support des fichiers HTML et Excel")
        print("  ‚úÖ G√©n√©ration de contenu HTML format√© avec tableaux et graphiques")
        print("  ‚úÖ D√©tection automatique des fichiers index")
        print("  ‚úÖ Int√©gration avec le workflow de g√©n√©ration de statistiques")
        print("\nüéØ Utilisation:")
        print("  1. G√©n√©rez des statistiques filtr√©es dans le module Team Statistics")
        print("  2. Les statistiques seront automatiquement inject√©es dans l'index du dossier stats")
        print("  3. Le fichier index sera mis √† jour avec les nouvelles donn√©es")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - tests_passed} test(s) ont √©chou√©.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
